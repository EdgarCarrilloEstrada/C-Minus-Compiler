options {}

PARSER_BEGIN(cminusparser)

public class cminusparser {
    public static void main(String [] args) throws ParseException{
            cminusparser anLex = new cminusparser(System.in);
            anLex.Ejecucion();
            System.out.println("\n\nAnalysis has ended successfully!");
}
}
PARSER_END(cminusparser)

TOKEN : {
    <CONDICIONAL_IF: "if">
    {System.out.println(matchedToken.beginLine + ". Se encontro el condicional if: " +image);}
}

TOKEN : {
    <CONDICIONAL_ELSE: "else">
    {System.out.println(matchedToken.beginLine + ". Se encontro el condicional else: " +image);}
}

TOKEN : {
    <DATO_INT: "int">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato int: " +image);}
}

TOKEN : {
    <DATO_FLOAT: "float">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato float: " +image);}
}

TOKEN : {
    <DATO_CHAR: "char">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato char: " +image);}
}

TOKEN : {
    <RETORNAR_RETURN: "return">
    {System.out.println(matchedToken.beginLine + ". Se encontro el retorno de valor return: " +image);}
}

TOKEN : {
    <VACIO_VOID: "void">
    {System.out.println(matchedToken.beginLine + ". Se encontro el vacio: " +image);}
}

TOKEN : {
    <CICLO_WHILE: "while">
    {System.out.println(matchedToken.beginLine + ". Se encontro el inicio del ciclo while: " +image);}
}

TOKEN : {
    <SIMBOLO_MAS: ["+"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mas: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOS: ["-"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menos: " +image);}
}

TOKEN : {
    <SIMBOLO_POR: ["*"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo asterisco: " +image);}
}

TOKEN : {
    <SIMBOLO_DIVISION: ["/"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo diagonal: " +image);}
}

TOKEN : {
    <SIMBOLO_MODULO: ["%"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo porcentaje: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOR_QUE: ["<"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menor que: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOR_IGUAL: "<=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menor igual que: " +image);}
}

TOKEN : {
    <SIMBOLO_MAYOR_QUE: [">"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mayor que: " +image);}
}

TOKEN : {
    <SIMBOLO_MAYOR_IGUAL: ">=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mayor igual que: " +image);}
}

TOKEN : {
    <SIMBOLO_COMPARACION: "==">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de comparacion: " +image);}
}

TOKEN : {
    <SIMBOLO_DIFERENTE: "!=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de diferencia: " +image);}
}

TOKEN : {
    <SIMBOLO_ASIGNACION: ["="]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo igual o asignacion: " +image);}
}

TOKEN : {
    <SIMBOLO_PUNTO_Y_COMA: [";"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo punto y coma: " +image);}
}

TOKEN : {
    <SIMBOLO_COMA: [","]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo coma: " +image);}
}

TOKEN : {
    <SIMBOLO_PUNTO: ["."]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo punto: " +image);}
}

TOKEN : {
    <SIMBOLO_COMILLA_SIMPLE: ["'"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo comilla simple: " +image);}
}

TOKEN : {
    <SIMBOLO_COMILLA_DOBLE: "\"">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo comilla doble: " +image);}
}

TOKEN : {
    <SIMBOLO_PARENTESIS_ABIERTO: ["("]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de parentesis abierto: " +image);}
}

TOKEN : {

    <SIMBOLO_PARENTESIS_CERRADO: [")"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de parentesis cerrado: " +image);}
}

TOKEN : {
    <SIMBOLO_CORCHETE_ABIERTO: ["["]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de corchete abierto: " +image);}
}

TOKEN : {
    <SIMBOLO_CORCHETE_CERRADO: ["]"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de corchete cerrado: " +image);}
}

TOKEN : {
    <SIMBOLO_LLAVE_ABIERTA: ["{"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de llave abierta: " +image);}
}

TOKEN : {
    <SIMBOLO_LLAVE_CERRADA: ["}"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de llave cerrada: " +image);}
}

TOKEN : {
    <NUMERO_ENTERO: <DIGITO>(<DIGITO>)*>
    {System.out.println(matchedToken.beginLine + ". Se encontro un numero entero: " +image);}
}

TOKEN : {
    <NUMERO_REAL: (<DIGITO>)+<SIMBOLO_PUNTO>(<DIGITO>)+>
    {System.out.println(matchedToken.beginLine + ". Se encontro un numero real: " +image);}
}

TOKEN : {
    <CARACTER: <SIMBOLO_COMILLA_SIMPLE> (<DIGITO> | <LETRA>) <SIMBOLO_COMILLA_SIMPLE> | <SIMBOLO_COMILLA_SIMPLE><SIMBOLO_COMILLA_SIMPLE>>
    {System.out.println(matchedToken.beginLine + ". Se encontro un caracter: " +image);}
}

TOKEN : {
    <SIMBOLO_GUION_BAJO: ["_"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro un guion bajo: " +image);}
}

TOKEN : {
    <IDENTIFICADOR: <LETRA> (<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )*>
    {System.out.println(matchedToken.beginLine + ". Se encontro un identificador: " +image);}
}





/*
SKIP : {
    <SIMBOLO_COMENTARIO_ABIERTO: "/*">
}
*/

/*
SKIP : {
    <SIMBOLO_COMENTARIO_CERRADO: "* /">
    arriba hay un espacio entre el asterisco y la diagonal para que se pueda comentar este bloque

}
*/

TOKEN : {
    <LETRA: ["a"-"z", "A"-"Z"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro una letra: " +image);}
}

TOKEN : {
    <DIGITO: ["0"-"9"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro un digito: " +image);}
}

SKIP : {
    <ESPACIO: " ">
}


SKIP : {
    <NUEVA_LINEA: "\n">
}

SKIP : {
    <RETORNO_DE_CARRO: "\r">
}

SKIP : {
    <TABULACION: "\t">
}

SKIP : {
    <COMENTARIO_LINEAL: "//" (~["\n", "\r"])*>
}

SKIP:
{ 
    "/*": DENTRO_COMENTARIO
}
<DENTRO_COMENTARIO>SKIP:
{
    "*/": DEFAULT
}
<DENTRO_COMENTARIO>MORE:
{
    <~[]> 
}

TOKEN : {
    <ERROR_CARACTER: <SIMBOLO_COMILLA_SIMPLE>(<DIGITO> | <LETRA> | <ESPACIO>)*<SIMBOLO_COMILLA_SIMPLE> |
    <SIMBOLO_COMILLA_SIMPLE>(<DIGITO> | <LETRA> | <ESPACIO>)* | (<DIGITO> | <LETRA> | <ESPACIO>)*<SIMBOLO_COMILLA_SIMPLE>>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un caracter: " + image + ". Linea " +matchedToken.beginLine);}
}


TOKEN : {
    <ERROR_NUMERO_REAL: (<SIMBOLO_PUNTO>)+(<DIGITO>)+ | (<DIGITO>)+(<SIMBOLO_PUNTO>)+>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un numero real: " + image + ". Linea " +matchedToken.beginLine);}
}

TOKEN : {
    <ERROR_IDENTIFICADOR: <DIGITO>(<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )* | <SIMBOLO_GUION_BAJO>(<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )*>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un identificador: " + image + ". Linea " +matchedToken.beginLine);}
}

TOKEN : {
    <ERROR_SIMBOLO_INVALIDO: ~[]>
    {System.out.println("ERROR LEXICO: Simbolo no valido: " + image + ". Linea " +matchedToken.beginLine);}
}

void Ejecucion() : {}
{
(<CONDICIONAL_IF> | <CONDICIONAL_ELSE> | <DATO_INT> | <DATO_FLOAT> | <DATO_CHAR> | <RETORNAR_RETURN> | <VACIO_VOID> |
<CICLO_WHILE> | <SIMBOLO_MAS> | <SIMBOLO_MENOS> | <SIMBOLO_POR> | <SIMBOLO_DIVISION> | <SIMBOLO_MODULO> |
<SIMBOLO_MENOR_QUE> | <SIMBOLO_MENOR_IGUAL> | <SIMBOLO_MAYOR_QUE> | <SIMBOLO_MAYOR_IGUAL> | <SIMBOLO_COMPARACION> |
<SIMBOLO_DIFERENTE> | <SIMBOLO_ASIGNACION> | <SIMBOLO_PUNTO_Y_COMA> | <SIMBOLO_COMA> | <SIMBOLO_PARENTESIS_ABIERTO> |
<SIMBOLO_PARENTESIS_CERRADO> | <SIMBOLO_CORCHETE_ABIERTO> | <SIMBOLO_CORCHETE_CERRADO> | <SIMBOLO_LLAVE_ABIERTA> |
<SIMBOLO_LLAVE_CERRADA> |  <NUMERO_ENTERO> | <NUMERO_REAL> | <CARACTER> | <SIMBOLO_COMILLA_DOBLE> |
<SIMBOLO_COMILLA_SIMPLE> | <SIMBOLO_PUNTO> | <IDENTIFICADOR> | <SIMBOLO_GUION_BAJO> | <LETRA> | <DIGITO> |
<ERROR_IDENTIFICADOR> | <ERROR_NUMERO_REAL> | <ERROR_SIMBOLO_INVALIDO> | <ERROR_CARACTER> )*
<EOF>
}