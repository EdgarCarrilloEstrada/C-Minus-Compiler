options {
Ignore_Case = false;
STATIC=false;
DEBUG_PARSER=true;
DEBUG_LOOKAHEAD=true;
}

PARSER_BEGIN(cminusparser)

public class cminusparser {
    public static void main(String [] args) throws ParseException{
            cminusparser anLex = new cminusparser(System.in);
            anLex.program();
            System.out.println("\n\nAnalysis has ended successfully!");
    }
}
PARSER_END(cminusparser)

TOKEN : {
    <CONDICIONAL_IF: "if">
    {System.out.println(matchedToken.beginLine + ". Se encontro el condicional if: " +image);}
}

TOKEN : {
    <CONDICIONAL_ELSE: "else">
    {System.out.println(matchedToken.beginLine + ". Se encontro el condicional else: " +image);}
}

TOKEN : {
    <DATO_INT: "int">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato int: " +image);}
}

TOKEN : {
    <DATO_FLOAT: "float">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato float: " +image);}
}

TOKEN : {
    <DATO_CHAR: "char">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato char: " +image);}
}

TOKEN : {
    <RETORNAR_RETURN: "return">
    {System.out.println(matchedToken.beginLine + ". Se encontro el retorno de valor return: " +image);}
}

TOKEN : {
    <VACIO_VOID: "void">
    {System.out.println(matchedToken.beginLine + ". Se encontro el vacio: " +image);}
}

TOKEN : {
    <CICLO_WHILE: "while">
    {System.out.println(matchedToken.beginLine + ". Se encontro el inicio del ciclo while: " +image);}
}

TOKEN : {
    <SIMBOLO_MAS: ["+"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mas: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOS: ["-"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menos: " +image);}
}

TOKEN : {
    <SIMBOLO_POR: ["*"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo asterisco: " +image);}
}

TOKEN : {
    <SIMBOLO_DIVISION: ["/"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo diagonal: " +image);}
}

TOKEN : {
    <SIMBOLO_MODULO: ["%"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo porcentaje: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOR_QUE: ["<"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menor que: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOR_IGUAL: "<=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menor igual que: " +image);}
}

TOKEN : {
    <SIMBOLO_MAYOR_QUE: [">"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mayor que: " +image);}
}

TOKEN : {
    <SIMBOLO_MAYOR_IGUAL: ">=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mayor igual que: " +image);}
}

TOKEN : {
    <SIMBOLO_COMPARACION: "==">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de comparacion: " +image);}
}

TOKEN : {
    <SIMBOLO_DIFERENTE: "!=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de diferencia: " +image);}
}

TOKEN : {
    <SIMBOLO_ASIGNACION: ["="]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo igual o asignacion: " +image);}
}

TOKEN : {
    <SIMBOLO_PUNTO_Y_COMA: [";"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo punto y coma: " +image);}
}

TOKEN : {
    <SIMBOLO_COMA: [","]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo coma: " +image);}
}

TOKEN : {
    <SIMBOLO_PUNTO: ["."]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo punto: " +image);}
}

TOKEN : {
    <SIMBOLO_COMILLA_SIMPLE: ["'"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo comilla simple: " +image);}
}

TOKEN : {
    <SIMBOLO_COMILLA_DOBLE: "\"">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo comilla doble: " +image);}
}

TOKEN : {
    <SIMBOLO_PARENTESIS_ABIERTO: ["("]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de parentesis abierto: " +image);}
}

TOKEN : {

    <SIMBOLO_PARENTESIS_CERRADO: [")"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de parentesis cerrado: " +image);}
}

TOKEN : {
    <SIMBOLO_CORCHETE_ABIERTO: ["["]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de corchete abierto: " +image);}
}

TOKEN : {
    <SIMBOLO_CORCHETE_CERRADO: ["]"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de corchete cerrado: " +image);}
}

TOKEN : {
    <SIMBOLO_LLAVE_ABIERTA: ["{"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de llave abierta: " +image);}
}

TOKEN : {
    <SIMBOLO_LLAVE_CERRADA: ["}"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de llave cerrada: " +image);}
}

TOKEN : {
    <NUMERO_ENTERO: <DIGITO>(<DIGITO>)*>
    {System.out.println(matchedToken.beginLine + ". Se encontro un numero entero: " +image);}
}

TOKEN : {
    <NUMERO_REAL: (<DIGITO>)+<SIMBOLO_PUNTO>(<DIGITO>)+>
    {System.out.println(matchedToken.beginLine + ". Se encontro un numero real: " +image);}
}

TOKEN : {
    <CARACTER: <SIMBOLO_COMILLA_SIMPLE> (<DIGITO> | <LETRA>) <SIMBOLO_COMILLA_SIMPLE> | <SIMBOLO_COMILLA_SIMPLE><SIMBOLO_COMILLA_SIMPLE>>
    {System.out.println(matchedToken.beginLine + ". Se encontro un caracter: " +image);}
}

TOKEN : {
    <SIMBOLO_GUION_BAJO: ["_"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro un guion bajo: " +image);}
}

TOKEN : {
    <IDENTIFICADOR: <LETRA> (<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )*>
    {System.out.println(matchedToken.beginLine + ". Se encontro un identificador: " +image);}
}

TOKEN : {
    <LETRA: ["a"-"z", "A"-"Z"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro una letra: " +image);}
}

TOKEN : {
    <DIGITO: ["0"-"9"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro un digito: " +image);}
}
/*
TOKEN : {
    <SIMBOLO_J: ["j"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro una jota: " +image);}
}

TOKEN : {
    <NUMERO_COMPLEJO: (<DIGITO>)+ | (<DIGITO>)+ <SIMBOLO_J> | (<DIGITO>)+ (<SIMBOLO_MENOS> | <SIMBOLO_MAS>) (<DIGITO>)+ <SIMBOLO_J>>
}

 */

SKIP : {
    <ESPACIO: " ">
}


SKIP : {
    <NUEVA_LINEA: "\n">
}

SKIP : {
    <RETORNO_DE_CARRO: "\r">
}

SKIP : {
    <TABULACION: "\t">
}

SKIP : {
    <COMENTARIO_LINEAL: "//" (~["\n", "\r"])*>
}

SKIP:
{ 
    "/*": DENTRO_COMENTARIO
}
<DENTRO_COMENTARIO>SKIP:
{
    "*/": DEFAULT
}
<DENTRO_COMENTARIO>MORE:
{
    <~[]> 
}

SPECIAL_TOKEN : {
    <ERROR_CARACTER: <SIMBOLO_COMILLA_SIMPLE>(<DIGITO> | <LETRA> | <ESPACIO>)*<SIMBOLO_COMILLA_SIMPLE> |
    <SIMBOLO_COMILLA_SIMPLE>(<DIGITO> | <LETRA> | <ESPACIO>)* | (<DIGITO> | <LETRA> | <ESPACIO>)*<SIMBOLO_COMILLA_SIMPLE>>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un caracter: " + image + ". Linea " +matchedToken.beginLine);}
}


SPECIAL_TOKEN : {
    <ERROR_NUMERO_REAL: (<SIMBOLO_PUNTO>)+(<DIGITO>)+ | (<DIGITO>)+(<SIMBOLO_PUNTO>)+>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un numero real: " + image + ". Linea " +matchedToken.beginLine);}
}

SPECIAL_TOKEN : {
    <ERROR_IDENTIFICADOR: <DIGITO>(<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )* | <SIMBOLO_GUION_BAJO>(<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )*>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un identificador: " + image + ". Linea " +matchedToken.beginLine);}
}

SPECIAL_TOKEN : {
    <ERROR_SIMBOLO_INVALIDO: ~[]>
    {System.out.println("ERROR LEXICO: Simbolo no valido: " + image + ". Linea " +matchedToken.beginLine);}
}
/*
void Ejecucion() : {}
{
(<CONDICIONAL_IF> | <CONDICIONAL_ELSE> | <DATO_INT> | <DATO_FLOAT> | <DATO_CHAR> | <RETORNAR_RETURN> | <VACIO_VOID> |
<CICLO_WHILE> | <SIMBOLO_MAS> | <SIMBOLO_MENOS> | <SIMBOLO_POR> | <SIMBOLO_DIVISION> | <SIMBOLO_MODULO> |
<SIMBOLO_MENOR_QUE> | <SIMBOLO_MENOR_IGUAL> | <SIMBOLO_MAYOR_QUE> | <SIMBOLO_MAYOR_IGUAL> | <SIMBOLO_COMPARACION> |
<SIMBOLO_DIFERENTE> | <SIMBOLO_ASIGNACION> | <SIMBOLO_PUNTO_Y_COMA> | <SIMBOLO_COMA> | <SIMBOLO_PARENTESIS_ABIERTO> |
<SIMBOLO_PARENTESIS_CERRADO> | <SIMBOLO_CORCHETE_ABIERTO> | <SIMBOLO_CORCHETE_CERRADO> | <SIMBOLO_LLAVE_ABIERTA> |
<SIMBOLO_LLAVE_CERRADA> |  <NUMERO_ENTERO> | <NUMERO_REAL> | <CARACTER> | <SIMBOLO_COMILLA_DOBLE> |
<SIMBOLO_COMILLA_SIMPLE> | <SIMBOLO_PUNTO> | <IDENTIFICADOR> | <SIMBOLO_GUION_BAJO> | <LETRA> | <DIGITO> )*
<EOF>
}*/


//LINEA 1
void program() : {}
{
    declaration_list()
}

//LINEA 2
void declaration_list() : {}
{
    declaration() declaration_list_prima()
}

//LINEA 3
void declaration_list_prima() : {}
{
    (LOOKAHEAD(3) declaration() declaration_list_prima())* // | empty -> agregar LOOKAHEAD
}

//LINEA 4
void declaration() : {}
{
    LOOKAHEAD(3) var_declaration() | LOOKAHEAD(3) fun_declaration()
}

//LINEA 5
void var_declaration() : {}
{
    type_specifier() <IDENTIFICADOR> (<SIMBOLO_CORCHETE_ABIERTO> <NUMERO_ENTERO> <SIMBOLO_CORCHETE_CERRADO> | <SIMBOLO_COMA> <IDENTIFICADOR> )*  <SIMBOLO_PUNTO_Y_COMA> //aqui no lleva empty pero se factorizo
}

//LINEA 6
void type_specifier() : {}
{
    <DATO_INT> |<DATO_FLOAT> |<DATO_CHAR> |<VACIO_VOID>
}

//LINEA 7
void fun_declaration() : {}
{
    type_specifier() <IDENTIFICADOR> <SIMBOLO_PARENTESIS_ABIERTO> params() <SIMBOLO_PARENTESIS_CERRADO> compound_stmt()
}

//LINEA 8
void params() : {}
{
        LOOKAHEAD(3) param_list() | LOOKAHEAD (3) <VACIO_VOID>
}

//LINEA 9
void param_list() : {}
{
    param() param_list_prima()
}

//LINEA 10
void param_list_prima() : {}
{
    (<SIMBOLO_COMA> param())* // | empty -> agregar LOOKAHEAD
}

//LINEA 11
void param() : {}
{
    type_specifier() <IDENTIFICADOR> param_segunda_parte() //aqui no lleva empty, pero se factorizo -> agregar LOOKAHEAD
}

//LINEA 38
void param_segunda_parte() : {}
{
    (<SIMBOLO_CORCHETE_ABIERTO> <SIMBOLO_CORCHETE_CERRADO> )*
}

//LINEA 12
void compound_stmt() : {}
{
    <SIMBOLO_LLAVE_ABIERTA> local_declarations() statement_list() <SIMBOLO_LLAVE_CERRADA>
}

//LINEA 13
void local_declarations() : {}
{
    local_declarations_prima()
}

//LINEA 14
void local_declarations_prima() : {}
{
    (LOOKAHEAD(2) var_declaration() local_declarations_prima())* // | empty -> agregar LOOKAHEAD
}

//LINEA 15
void statement_list() : {}
{
    statement_list_prima()
}

//LINEA 16
void statement_list_prima() : {}
{
    (LOOKAHEAD(2) statement() statement_list_prima())* // | empty -> agregar LOOKAHEAD
}

//LINEA 17
void statement() : {}
{
    expression_stmt() | compound_stmt() | selection_stmt() | iteration_stmt() | return_stmt()
}

//LINEA 18
void expression_stmt() : {}
{
    expression() <SIMBOLO_PUNTO_Y_COMA> | <SIMBOLO_PUNTO_Y_COMA>
}

//LINEA 19
void selection_stmt() : {}
{
    LOOKAHEAD(5) <CONDICIONAL_IF> <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO> statement()  <CONDICIONAL_ELSE> statement() | <CONDICIONAL_IF> <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO> statement()
}


//LINEA 20
void iteration_stmt() : {}
{
    <CICLO_WHILE> <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO> statement()
}

//LINEA 21
void return_stmt() : {}
{
    <RETORNAR_RETURN> return_stmt_2()
}

//LINEA 39
void return_stmt_2() : {}
{
    <SIMBOLO_PUNTO_Y_COMA> | expression() <SIMBOLO_PUNTO_Y_COMA>
}

//LINEA 22
void expression() : {}
{
    LOOKAHEAD(3) var() <SIMBOLO_ASIGNACION> expression() | LOOKAHEAD(3) simple_expression() <SIMBOLO_PUNTO_Y_COMA>
}

//LINEA 23
void var() : {}
{
    <IDENTIFICADOR> (<SIMBOLO_CORCHETE_ABIERTO> expression() <SIMBOLO_CORCHETE_CERRADO> )*
}

//LINEA 24
void simple_expression() : {}
{
    LOOKAHEAD(3) additive_expression() relop() additive_expression() | LOOKAHEAD(3) additive_expression()
}

//LINEA 25
void relop() : {}
{
    <SIMBOLO_MENOR_IGUAL> | <SIMBOLO_MENOR_QUE> | <SIMBOLO_MAYOR_QUE> | <SIMBOLO_MAYOR_IGUAL> | <SIMBOLO_COMPARACION> | <SIMBOLO_DIFERENTE>
}

//LINEA 26
void additive_expression() : {}
{
    term() additive_expression_prima()
}

//LINEA 27
void additive_expression_prima() : {}
{
    (LOOKAHEAD(2)addop() term() additive_expression_prima())* // | empty -> agregar LOOKAHEAD
}

//LINEA 28
void addop() : {}
{
    <SIMBOLO_MAS> | <SIMBOLO_MENOS>
}

//LINEA 29
void term() : {}
{
    factor() term_prima()
}

//LINEA 30
void term_prima() : {}
{
    (LOOKAHEAD(2)mulop() factor() term_prima())* // | empty -> agregar LOOKAHEAD
}

//LINEA 31
void mulop() : {}
{
    <SIMBOLO_POR> | <SIMBOLO_DIVISION> | <SIMBOLO_MODULO>
}

//LINEA 32
void factor() : {}
{
    <NUMERO_ENTERO> | <NUMERO_REAL> | <CARACTER>  | LOOKAHEAD(3) call() | LOOKAHEAD(3) var() | <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO>
}

//LINEA 33
void call() : {}
{
    <IDENTIFICADOR> <SIMBOLO_PARENTESIS_ABIERTO> args() <SIMBOLO_PARENTESIS_CERRADO>
}

//LINEA 34
void args() : {}
{
    (arg_list())* // | empty -> agregar LOOKAHEAD
}

//LINEA 35
void arg_list() : {}
{
    expression() arg_list_prima()
}

//LINEA 36
void arg_list_prima() : {}
{
    (LOOKAHEAD(2) expression() arg_list_prima())* // | empty -> agregar LOOKAHEAD
}





















/*
// GRAMATICA EN LINEA 1
void program() : {}
{
    declaration_list()
}
// GRAMATICA EN LINEA 2 (ARREGLADA)
void declaration_list() : {}
{
    declaration() declaration_list_prima()
}
//GRAMATICA EN LINEA 2 (ARREGLADA)
void declaration_list_prima() : {}
{
    (LOOKAHEAD(2) declaration() declaration_list_prima() )*
}
//GRAMATICA EN LINEA 3
void declaration() : {}
{
    LOOKAHEAD(3) var_declaration() | fun_declaration()
}
//GRAMATICA EN LINEA 4
void var_declaration() : {}
{
    //type_specifier() <IDENTIFICADOR>  <SIMBOLO_PUNTO_Y_COMA> | type_specifier() <IDENTIFICADOR> <SIMBOLO_CORCHETE_ABIERTO> <NUMERO_ENTERO> <SIMBOLO_CORCHETE_CERRADO> <SIMBOLO_PUNTO_Y_COMA>
    type_specifier() <IDENTIFICADOR> (<SIMBOLO_CORCHETE_ABIERTO> <NUMERO_ENTERO> <SIMBOLO_CORCHETE_CERRADO>  | <SIMBOLO_COMA> <IDENTIFICADOR> ) * <SIMBOLO_PUNTO_Y_COMA>
}
//GRAMATICA EN LINEA 5
void type_specifier() : {}
{
    <DATO_INT> | <DATO_FLOAT> | <DATO_CHAR> | <VACIO_VOID>
}
//GRAMATICA EN LINEA 6
void fun_declaration() : {}
{
    type_specifier() <IDENTIFICADOR> <SIMBOLO_PARENTESIS_ABIERTO> params() <SIMBOLO_PARENTESIS_CERRADO> compound_stmt()
}
//GRAMATICA EN LINEA 7
void params() : {}
{
    LOOKAHEAD(2) param_list() | <VACIO_VOID>
}
//GRAMATICA EN LINEA 8 (ARREGLADA)
void param_list() : {}
{
    param() param_list_prima()
}
//GRAMATICA EN LINEA 8 (ARREGLADA)
void param_list_prima() : {}
{
    ( <SIMBOLO_COMA> param() )*
}
//GRAMATICA EN LINEA 9
void param() : {}
{
    type_specifier() <IDENTIFICADOR> (<SIMBOLO_CORCHETE_ABIERTO> <SIMBOLO_CORCHETE_CERRADO>)*
}
//GRAMATICA EN LINEA 10
void compound_stmt() : {}
{
    <SIMBOLO_LLAVE_ABIERTA> local_declarations() statement_list() <SIMBOLO_LLAVE_CERRADA>
}
//GRAMATICA EN LINEA 11 (ARREGLADA)
void local_declarations() : {}
{
    local_declarations_prima()
}
//GRAMATICA EN LINEA 11 (ARREGLADA)
void local_declarations_prima() : {}
{
    (LOOKAHEAD(2) var_declaration() local_declarations() )*
}
//GRAMATICA EN LINEA 12 (ARREGLADA)
void statement_list() : {}
{
    statement_list_prima()
}
//GRAMATICA EN LINEA 12 (ARREGLADA)
void statement_list_prima() : {}
{
    (LOOKAHEAD(2) statement() statement_list_prima() )*
}
//GRAMATICA EN LINEA 13
void statement() : {}
{
    expression_stmt() | compound_stmt() | selection_stmt() | iteration_stmt() | return_stmt()
}
//GRAMATICA EN LINEA 14
void expression_stmt() : {}
{
    expression() <SIMBOLO_PUNTO_Y_COMA> | <SIMBOLO_PUNTO_Y_COMA>
}
//GRAMATICA EN LINEA 15
void selection_stmt() : {}
{
    LOOKAHEAD(3) <CONDICIONAL_IF> <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO>  statement() |
    <CONDICIONAL_IF> <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO>  statement() <CONDICIONAL_ELSE>  statement()
}
//GRAMATICA EN LINEA 16
void iteration_stmt() : {}
{
    <CICLO_WHILE> <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO> statement()
}
//GRAMATICA EN LINEA 17
void return_stmt() : {}
{
    //LOOKAHEAD(2) <RETORNAR_RETURN> <SIMBOLO_PUNTO_Y_COMA> | <RETORNAR_RETURN> expression() <SIMBOLO_PUNTO_Y_COMA>
    <RETORNAR_RETURN> (<SIMBOLO_PUNTO_Y_COMA> | expression() <SIMBOLO_PUNTO_Y_COMA>)
}
//GRAMATICA EN LINEA 18
void expression() : {}
{
    LOOKAHEAD(3) var() <SIMBOLO_ASIGNACION> expression() | simple_expression()
}
//GRAMATICA EN LINEA 19
void var() : {}
{
    //<IDENTIFICADOR> | <IDENTIFICADOR> <SIMBOLO_CORCHETE_ABIERTO> expression() <SIMBOLO_CORCHETE_CERRADO>
    <IDENTIFICADOR> (<SIMBOLO_CORCHETE_ABIERTO> expression() <SIMBOLO_CORCHETE_CERRADO>)*
}
//GRAMATICA EN LINEA 20
void simple_expression() : {}
{
    LOOKAHEAD(3) additive_expression() relop() additive_expression() | additive_expression()
}
//GRAMATICA EN LINEA 21
void relop() : {}
{
    <SIMBOLO_MENOR_IGUAL> | <SIMBOLO_MENOR_QUE> | <SIMBOLO_MAYOR_QUE> | <SIMBOLO_MAYOR_IGUAL> | <SIMBOLO_COMPARACION> | <SIMBOLO_DIFERENTE>
}
//GRAMATICA EN LINEA 22 (ARREGLADA)
void additive_expression() : {}
{
    term() additive_expression_prima()
}
//GRAMATICA EN LINEA 22 (ARREGLADA)
void additive_expression_prima() :{}
{
    (LOOKAHEAD(2) addop() term() additive_expression_prima())*
}
//GRAMATICA EN LINEA 23
void addop() : {}
{
    <SIMBOLO_MAS> | <SIMBOLO_MENOS>
}
//GRAMATICA EN LINEA 24 (ARREGLADA)
void term() : {}
{
    factor() term_prima()
}
//GRAMATICA EN LINEA 24 (ARREGLADA)
void term_prima() : {}
{
    (LOOKAHEAD(2) mulop() factor() term_prima() )*
}
//GRAMATICA EN LINEA 25
void mulop() : {}
{
    <SIMBOLO_POR> | <SIMBOLO_DIVISION> | <SIMBOLO_MODULO>
}
//GRAMATICA EN LINEA 26
void factor() : {}
{
    <SIMBOLO_PARENTESIS_ABIERTO> expression() <SIMBOLO_PARENTESIS_CERRADO> | LOOKAHEAD(2)  var() | LOOKAHEAD(2)  call() | <NUMERO_ENTERO> | <NUMERO_REAL> | <CARACTER>
}
//GRAMATICA EN LINEA 27
void call() : {}
{
    <IDENTIFICADOR> <SIMBOLO_PARENTESIS_ABIERTO> args() <SIMBOLO_PARENTESIS_CERRADO>
}
//GRAMATICA EN LINEA 28
void args() : {}
{
    (arg_list())*
}
//GRAMATICA EN LINEA 29 (ARREGLADA)
void arg_list() :{}
{
    expression() arg_list_prima()
}
//GRAMATICA EN LINEA 29 (ARREGLADA)
void arg_list_prima() : {}
{
    (LOOKAHEAD(2) <SIMBOLO_COMA> expression() arg_list_prima() )*
}

 */