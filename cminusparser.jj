options {
Ignore_Case = false;
STATIC=false;
DEBUG_PARSER=false; //true
DEBUG_LOOKAHEAD=false; //true
}

PARSER_BEGIN(cminusparser)

import java.util.*;

public class cminusparser {

    static class symbol{
            String categoria;
            String tipo;
            int tamanio;
        }

    static Hashtable<String, symbol> contenedor = new Hashtable<String,symbol>();

    public static void main(String [] args) throws ParseException{
            cminusparser anLex = new cminusparser(System.in);
            anLex.Inicio();
            mostrar();
            System.out.println("\n\nAnalysis has ended successfully!");

    }

    static void accesoArreglo(String id, int tamanio){
        if(existeVariable(id)){
            int tamanioArreglo = obtenerTamanio(id);
            if(tamanio < tamanioArreglo){
                System.out.println("Posicion dentro del rango del arreglo");
            }
            else{
                        System.out.println("Posicion fuera del rango del arreglo");
                    }
        }
        else{
            System.out.println("No existe la variable dentro de la tabla de simbolos");
        }

    }

    static void guardar(String Id, String categoria, String tipo, int tamanio ){
        //Enumeration llaves = contenedor.keys();
        //while (llaves.hasMoreElements()) {
        //    if(llaves.nextElement().equals(Id)){
        //        System.out.println("Repeticion de declaracion en el identificador: " + Id);
        //    }
        //}

        if(!contenedor.containsKey(Id)){

            symbol simbolo = new symbol();
                    simbolo.categoria = categoria;
                    simbolo.tipo = tipo;
                    simbolo.tamanio = tamanio;
            contenedor.put(Id,simbolo);

        }
        else{
            System.out.println("Repeticion de declaracion en el identificador: " + Id);
        }

    	//System.out.println(""+"Id: " + Id + " Corresponde: " + contenedor.get(Id));
    }

    static int verificacionTamanio(String tipo){
        if (tipo.equals("int")){
            return 4;
        }
        if (tipo.equals("float")){
            return 8;
        }
        if (tipo.equals("char")){
            return 1;
        }
        if (tipo.equals("void")){
            return 0;
        }
        return 99;

    }

    static String obtenerTipo(String id){
        String tipo;
        symbol simbolo = new symbol();
        simbolo = contenedor.get(id);

        tipo = simbolo.tipo;

        return tipo;
    }

    static int obtenerTamanio(String id){
        int tamanio;
        symbol simbolo = new symbol();
        simbolo = contenedor.get(id);

        tamanio = simbolo.tamanio;



        return tamanio;
    }

    static boolean existeVariable(String id){
        if(contenedor.containsKey(id)){
            // System.out.println("Si existe el valor en la tabla: " + id);
            return true;
        }
        else{
            System.out.println("No se ha declarado la variable: " + id);
            return false;
        }
    }



    static void mostrar (){
        System.out.println("ACCEDIENDO A TABLA DE SIMBOLOS(HASH)");
    	for(String id : contenedor.keySet()){
            symbol simbolo = new symbol();
            simbolo = contenedor.get(id);

            System.out.println("\n\nVariable: " + id + "\ncategoria: " + simbolo.categoria + "\ntipo: " + simbolo.tipo + "\ntamaÃ±o o # de parametros: " + simbolo.tamanio);}

    }

}
PARSER_END(cminusparser)

TOKEN : {
    <CONDICIONAL_IF: "if">
    {System.out.println(matchedToken.beginLine + ". Se encontro el condicional if: " +image);}
}

TOKEN : {
    <CONDICIONAL_ELSE: "else">
    {System.out.println(matchedToken.beginLine + ". Se encontro el condicional else: " +image);}
}

TOKEN : {
    <DATO_INT: "int">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato int: " +image);}
}

TOKEN : {
    <DATO_FLOAT: "float">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato float: " +image);}
}

TOKEN : {
    <DATO_CHAR: "char">
    {System.out.println(matchedToken.beginLine + ". Se encontro el tipo de dato char: " +image);}
}

TOKEN : {
    <RETORNAR_RETURN: "return">
    {System.out.println(matchedToken.beginLine + ". Se encontro el retorno de valor return: " +image);}
}

TOKEN : {
    <VACIO_VOID: "void">
    {System.out.println(matchedToken.beginLine + ". Se encontro el vacio: " +image);}
}

TOKEN : {
    <CICLO_WHILE: "while">
    {System.out.println(matchedToken.beginLine + ". Se encontro el inicio del ciclo while: " +image);}
}

TOKEN : {
    <SIMBOLO_MAS: ["+"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mas: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOS: ["-"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menos: " +image);}
}

TOKEN : {
    <SIMBOLO_POR: ["*"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo asterisco: " +image);}
}

TOKEN : {
    <SIMBOLO_DIVISION: ["/"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo diagonal: " +image);}
}

TOKEN : {
    <SIMBOLO_MODULO: ["%"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo porcentaje: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOR_QUE: ["<"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menor que: " +image);}
}

TOKEN : {
    <SIMBOLO_MENOR_IGUAL: "<=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo menor igual que: " +image);}
}

TOKEN : {
    <SIMBOLO_MAYOR_QUE: [">"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mayor que: " +image);}
}

TOKEN : {
    <SIMBOLO_MAYOR_IGUAL: ">=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo mayor igual que: " +image);}
}

TOKEN : {
    <SIMBOLO_COMPARACION: "==">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de comparacion: " +image);}
}

TOKEN : {
    <SIMBOLO_DIFERENTE: "!=">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de diferencia: " +image);}
}

TOKEN : {
    <SIMBOLO_ASIGNACION: ["="]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo igual o asignacion: " +image);}
}

TOKEN : {
    <SIMBOLO_PUNTO_Y_COMA: [";"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo punto y coma: " +image);}
}

TOKEN : {
    <SIMBOLO_COMA: [","]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo coma: " +image);}
}

TOKEN : {
    <SIMBOLO_PUNTO: ["."]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo punto: " +image);}
}

TOKEN : {
    <SIMBOLO_COMILLA_SIMPLE: ["'"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo comilla simple: " +image);}
}

TOKEN : {
    <SIMBOLO_COMILLA_DOBLE: "\"">
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo comilla doble: " +image);}
}

TOKEN : {
    <SIMBOLO_PARENTESIS_ABIERTO: ["("]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de parentesis abierto: " +image);}
}

TOKEN : {

    <SIMBOLO_PARENTESIS_CERRADO: [")"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de parentesis cerrado: " +image);}
}

TOKEN : {
    <SIMBOLO_CORCHETE_ABIERTO: ["["]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de corchete abierto: " +image);}
}

TOKEN : {
    <SIMBOLO_CORCHETE_CERRADO: ["]"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de corchete cerrado: " +image);}
}

TOKEN : {
    <SIMBOLO_LLAVE_ABIERTA: ["{"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de llave abierta: " +image);}
}

TOKEN : {
    <SIMBOLO_LLAVE_CERRADA: ["}"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro el simbolo de llave cerrada: " +image);}
}

TOKEN : {
    <NUMERO_ENTERO: <DIGITO>(<DIGITO>)*>
    {System.out.println(matchedToken.beginLine + ". Se encontro un numero entero: " +image);}
}

TOKEN : {
    <NUMERO_REAL: (<DIGITO>)+<SIMBOLO_PUNTO>(<DIGITO>)+>
    {System.out.println(matchedToken.beginLine + ". Se encontro un numero real: " +image);}
}

TOKEN : {
    <CARACTER: <SIMBOLO_COMILLA_SIMPLE> (<DIGITO> | <LETRA>) <SIMBOLO_COMILLA_SIMPLE> | <SIMBOLO_COMILLA_SIMPLE><SIMBOLO_COMILLA_SIMPLE>>
    {System.out.println(matchedToken.beginLine + ". Se encontro un caracter: " +image);}
}

TOKEN : {
    <SIMBOLO_GUION_BAJO: ["_"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro un guion bajo: " +image);}
}

TOKEN : {
    <IDENTIFICADOR: <LETRA> (<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )*>
    {System.out.println(matchedToken.beginLine + ". Se encontro un identificador: " +image);}
}

TOKEN : {
    <LETRA: ["a"-"z", "A"-"Z"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro una letra: " +image);}
}

TOKEN : {
    <DIGITO: ["0"-"9"]>
    {System.out.println(matchedToken.beginLine + ". Se encontro un digito: " +image);}
}

SKIP : {
    <ESPACIO: " ">
}


SKIP : {
    <NUEVA_LINEA: "\n">
}

SKIP : {
    <RETORNO_DE_CARRO: "\r">
}

SKIP : {
    <TABULACION: "\t">
}

SKIP : {
    <COMENTARIO_LINEAL: "//" (~["\n", "\r"])*>
}

SKIP:
{ 
    "/*": DENTRO_COMENTARIO
}
<DENTRO_COMENTARIO>SKIP:
{
    "*/": DEFAULT
}
<DENTRO_COMENTARIO>MORE:
{
    <~[]> 
}

SPECIAL_TOKEN : {
    <ERROR_CARACTER: <SIMBOLO_COMILLA_SIMPLE>(<DIGITO> | <LETRA> | <ESPACIO>)*<SIMBOLO_COMILLA_SIMPLE> |
    <SIMBOLO_COMILLA_SIMPLE>(<DIGITO> | <LETRA> | <ESPACIO>)* | (<DIGITO> | <LETRA> | <ESPACIO>)*<SIMBOLO_COMILLA_SIMPLE>>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un caracter: " + image + ". Linea " +matchedToken.beginLine);}
}


SPECIAL_TOKEN : {
    <ERROR_NUMERO_REAL: (<SIMBOLO_PUNTO>)+(<DIGITO>)+ | (<DIGITO>)+(<SIMBOLO_PUNTO>)+>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un numero real: " + image + ". Linea " +matchedToken.beginLine);}
}

SPECIAL_TOKEN : {
    <ERROR_IDENTIFICADOR: <DIGITO>(<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )* | <SIMBOLO_GUION_BAJO>(<LETRA> | <DIGITO> | <SIMBOLO_GUION_BAJO> )*>
    {System.out.println("ERROR LEXICO: Forma incorrecta de declarar un identificador: " + image + ". Linea " +matchedToken.beginLine);}
}

SPECIAL_TOKEN : {
    <ERROR_SIMBOLO_INVALIDO: ~[]>
    {System.out.println("ERROR LEXICO: Simbolo no valido: " + image + ". Linea " +matchedToken.beginLine);}
}

void Inicio() : {}
{
    (program())+<EOF>
}

// GRAMATICA EN LINEA 1
void program() : {}
{
    declaration_list()
}

// GRAMATICA EN LINEA 2 (ARREGLADA)
void declaration_list() : {}
{
    declaration() declaration_list_prima()
}

//GRAMATICA EN LINEA 2 (ARREGLADA)
void declaration_list_prima() : {}
{
    (LOOKAHEAD(20) declaration() declaration_list_prima() )*
}

//GRAMATICA EN LINEA 3
void declaration() : {}
{
    LOOKAHEAD(20) var_declaration() | fun_declaration()
}

//GRAMATICA EN LINEA 4
//ARREGLAR PARA QUE DETECTE ARREGLOS INDIVIDUALES
void var_declaration() : {String id, tipo;}
{

    tipo=type_specifier() <IDENTIFICADOR> {id=token.image;} var_declaration_ending(id, tipo)
    //type_specifier() <IDENTIFICADOR> (((<SIMBOLO_CORCHETE_ABIERTO> <NUMERO_ENTERO> <SIMBOLO_CORCHETE_CERRADO> | <SIMBOLO_COMA> <IDENTIFICADOR> )*) <SIMBOLO_PUNTO_Y_COMA> )
    //type_specifier() (<IDENTIFICADOR> {System.out.println("tomo variable");guardar(token.image, "variable", "int", 4);} (<SIMBOLO_COMA> <IDENTIFICADOR> {guardar(token.image,  "variable", "int", 4);})? | <IDENTIFICADOR> {System.out.println("Entro a arreglo");guardar(token.image, "arreglo", "int", 4);} (<SIMBOLO_CORCHETE_ABIERTO> <NUMERO_ENTERO> <SIMBOLO_CORCHETE_CERRADO>)) <SIMBOLO_PUNTO_Y_COMA>
}

void var_declaration_ending(String id, String tipo):{int tamanio;}
{
    <SIMBOLO_PUNTO_Y_COMA> {tamanio=verificacionTamanio(tipo);guardar(id, "variable", tipo, tamanio);} /*AQUI SE GUARDA LA TABLA DE SIMBOLOS */
    |
    <SIMBOLO_CORCHETE_ABIERTO> <NUMERO_ENTERO> {tamanio=Integer.parseInt(token.image);} <SIMBOLO_CORCHETE_CERRADO> <SIMBOLO_PUNTO_Y_COMA> {guardar(id, "arreglo", tipo, tamanio);}  /*AQUI SE GUARDA LA TABLA DE SIMBOLOS */
    |
    varias_variables(tipo)
}

void varias_variables(String tipo):{int tamanio;}
{
    <SIMBOLO_COMA> <IDENTIFICADOR> {tamanio=verificacionTamanio(tipo);guardar(token.image, "variable", tipo, tamanio);} /*AQUI SE GUARDA LA TABLA DE SIMBOLOS */ varias_variables(tipo)
}

//GRAMATICA EN LINEA 5
String type_specifier() : {String tipo;}
{
    <DATO_INT> {tipo = token.image; return tipo;} | <DATO_FLOAT> {tipo = token.image; return tipo;} | <DATO_CHAR> {tipo = token.image; return tipo;} | <VACIO_VOID> {tipo = token.image; return tipo;}
}
//GRAMATICA EN LINEA 6
void fun_declaration() : {String tipo, id; int tamanio;}
{
    tipo = type_specifier() <IDENTIFICADOR> {id = token.image;}  <SIMBOLO_PARENTESIS_ABIERTO> tamanio = params() <SIMBOLO_PARENTESIS_CERRADO> {guardar(id, "funcion", tipo, tamanio);} compound_stmt() {}
}
//GRAMATICA EN LINEA 7
int params() : {int contador = 0;}
{
    LOOKAHEAD(20) contador = param_list() {return contador;} | <VACIO_VOID> {contador = 0; return contador;}
}
//GRAMATICA EN LINEA 8 (ARREGLADA)
int param_list() : {int contador = 0;}
{
    param() {System.out.println("cantidad de contador antes de incremento: " + contador); contador++; System.out.println("cantidad de contador despues de incremento: " + contador); } contador = param_list_prima(contador) {return contador;}
}
//GRAMATICA EN LINEA 8 (ARREGLADA)
int param_list_prima(int contador) : {}
{
    ( <SIMBOLO_COMA> param() {contador++;} )* {return contador;}
}
//GRAMATICA EN LINEA 9
void param() : {String id, tipo; int tamanio;}
{
    tipo=type_specifier() <IDENTIFICADOR> {id=token.image;} param_ending(id, tipo) {tamanio = verificacionTamanio(tipo); guardar(id, "variable", tipo, tamanio);}
}

void param_ending(String id, String tipo) : {int tamanio;}
{
    (<SIMBOLO_CORCHETE_ABIERTO> <SIMBOLO_CORCHETE_CERRADO> {tamanio = verificacionTamanio(tipo); guardar(id, "arreglo", tipo, tamanio);})*
}
//GRAMATICA EN LINEA 10
void compound_stmt() : {}
{
    <SIMBOLO_LLAVE_ABIERTA> local_declarations() statement_list() <SIMBOLO_LLAVE_CERRADA>
}
//GRAMATICA EN LINEA 11 (ARREGLADA)
void local_declarations() : {}
{
    local_declarations_prima()
}
//GRAMATICA EN LINEA 11 (ARREGLADA)
void local_declarations_prima() : {}
{
    (LOOKAHEAD(20) var_declaration() local_declarations() )*
}
//GRAMATICA EN LINEA 12 (ARREGLADA)
void statement_list() : {}
{
    statement_list_prima()
}
//GRAMATICA EN LINEA 12 (ARREGLADA)
void statement_list_prima() : {}
{
    (LOOKAHEAD(20) statement() statement_list_prima() )*
}
//GRAMATICA EN LINEA 13
void statement() : {}
{
    return_stmt() | expression_stmt() | compound_stmt() | selection_stmt() | iteration_stmt()
}
//GRAMATICA EN LINEA 14
void expression_stmt() : {String aux = "";}
{
    expression(aux) <SIMBOLO_PUNTO_Y_COMA> | <SIMBOLO_PUNTO_Y_COMA>
}
//GRAMATICA EN LINEA 15
void selection_stmt() : {}
{
     parte_if() parte_else()
}

void parte_if(): {String aux = "";}
{
    <CONDICIONAL_IF> <SIMBOLO_PARENTESIS_ABIERTO> expression(aux) <SIMBOLO_PARENTESIS_CERRADO>  statement()
}

void parte_else(): {}
{
    (LOOKAHEAD(20) <CONDICIONAL_ELSE>  statement())*
}

//GRAMATICA EN LINEA 16
void iteration_stmt() : {String aux = "";}
{
    <CICLO_WHILE> <SIMBOLO_PARENTESIS_ABIERTO> expression(aux) <SIMBOLO_PARENTESIS_CERRADO> statement()
}
//GRAMATICA EN LINEA 17
void return_stmt() : {String aux = "";}
{
    <RETORNAR_RETURN> (<SIMBOLO_PUNTO_Y_COMA> | expression(aux) <SIMBOLO_PUNTO_Y_COMA>)
}
//GRAMATICA EN LINEA 18
void expression(String id) : {String aux = "";}
{
    LOOKAHEAD(20) var() <SIMBOLO_ASIGNACION> expression(aux) | simple_expression(id)
}
//GRAMATICA EN LINEA 19
void var() : {String id; boolean existe; int tamanio; String tipo;}
{
    <IDENTIFICADOR> {id = token.image; existe = existeVariable(id); System.out.println("Existe variable: " + existe); if(existe==true){tamanio = obtenerTamanio(id); System.out.println("TamaÃ±o de la variable: " + tamanio);} if(existe==true){tipo = obtenerTipo(id); System.out.println("El tipo de variable es: " + tipo);}  } var_extra(id)
}

void var_extra(String id): {}
{
    (LOOKAHEAD(20)<SIMBOLO_CORCHETE_ABIERTO> expression(id) <SIMBOLO_CORCHETE_CERRADO>)*
}
//GRAMATICA EN LINEA 20
void simple_expression(String id) : {}
{
    additive_expression(id) simple_expression_ending()
}

void simple_expression_ending() : {String aux = "";}
{
    (LOOKAHEAD(5) relop() additive_expression(aux)) *
}
//GRAMATICA EN LINEA 21
void relop() : {}
{
    <SIMBOLO_MENOR_IGUAL> | <SIMBOLO_MENOR_QUE> | <SIMBOLO_MAYOR_QUE> | <SIMBOLO_MAYOR_IGUAL> | <SIMBOLO_COMPARACION> | <SIMBOLO_DIFERENTE>
}
//GRAMATICA EN LINEA 22 (ARREGLADA)
void additive_expression(String id) : {}
{
    term(id) additive_expression_prima()
}
//GRAMATICA EN LINEA 22 (ARREGLADA)
void additive_expression_prima() :{String aux="";}
{
    (LOOKAHEAD(20) addop() term(aux) additive_expression_prima())*
}
//GRAMATICA EN LINEA 23
void addop() : {}
{
    <SIMBOLO_MAS> | <SIMBOLO_MENOS>
}
//GRAMATICA EN LINEA 24 (ARREGLADA)
void term(String id) : {}
{
    factor(id) term_prima()
}
//GRAMATICA EN LINEA 24 (ARREGLADA)
void term_prima() : {String aux = "";}
{
    (LOOKAHEAD(20) mulop() factor(aux) term_prima() )*
}
//GRAMATICA EN LINEA 25
void mulop() : {}
{
    <SIMBOLO_POR> | <SIMBOLO_DIVISION> | <SIMBOLO_MODULO>
}
//GRAMATICA EN LINEA 26
void factor(String id) : {String aux = ""; int tamanio = 0;}
{
    LOOKAHEAD(20)  call() | <SIMBOLO_PARENTESIS_ABIERTO> expression(aux) <SIMBOLO_PARENTESIS_CERRADO> | LOOKAHEAD(20)  var() |  <NUMERO_ENTERO> {tamanio = Integer.parseInt(token.image); if(id!=aux) accesoArreglo(id, tamanio);} | <NUMERO_REAL> | <CARACTER>
}
//GRAMATICA EN LINEA 27
void call() : {String id;}
{
    <IDENTIFICADOR> {id = token.image;} <SIMBOLO_PARENTESIS_ABIERTO> args() <SIMBOLO_PARENTESIS_CERRADO>
}
//GRAMATICA EN LINEA 28
void args() : {}
{
    (arg_list())*
}
//GRAMATICA EN LINEA 29 (ARREGLADA)
void arg_list() :{String aux = "";}
{
    expression(aux) arg_list_prima()
}
//GRAMATICA EN LINEA 29 (ARREGLADA)
void arg_list_prima() : {String aux = "";}
{
    (LOOKAHEAD(20) <SIMBOLO_COMA> expression(aux) arg_list_prima() )*
}