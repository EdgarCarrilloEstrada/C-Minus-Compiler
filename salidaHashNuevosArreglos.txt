Call:   Inicio
  Call:   program
    Call:   declaration_list
      Call:   declaration
        Call:   var_declaration(LOOKING AHEAD...)
          Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato float: float
            Visited token: <"float" at line 1 column 1>; Expected token: <"int">
            Visited token: <"float" at line 1 column 1>; Expected token: <"float">
          Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: f
          Visited token: <<IDENTIFICADOR>: "f" at line 1 column 7>; Expected token: <<IDENTIFICADOR>>
          Call:   var_declaration_ending(LOOKING AHEAD...)
1. Se encontro el simbolo de parentesis abierto: (
            Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
            Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
            Call:   varias_variables(LOOKING AHEAD...)
              Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_COMA>>
            Return: varias_variables(LOOKAHEAD FAILED)
          Return: var_declaration_ending(LOOKAHEAD FAILED)
        Return: var_declaration(LOOKAHEAD FAILED)
        Call:   fun_declaration
          Call:   type_specifier
            Consumed token: <"float" at line 1 column 1>
          Return: type_specifier
          Consumed token: <<IDENTIFICADOR>: "f" at line 1 column 7>
          Consumed token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>
          Call:   params
            Call:   param_list(LOOKING AHEAD...)
              Call:   param(LOOKING AHEAD...)
                Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato char: char
                  Visited token: <"char" at line 1 column 9>; Expected token: <"int">
                  Visited token: <"char" at line 1 column 9>; Expected token: <"float">
                  Visited token: <"char" at line 1 column 9>; Expected token: <"char">
                Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: arrayDentroParametro
                Visited token: <<IDENTIFICADOR>: "arrayDentroParametro" at line 1 column 14>; Expected token: <<IDENTIFICADOR>>
                Call:   param_ending(LOOKING AHEAD...)
1. Se encontro el simbolo de corchete abierto: [
                  Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 1 column 34>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
1. Se encontro el simbolo de corchete cerrado: ]
                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 1 column 35>; Expected token: <<SIMBOLO_CORCHETE_CERRADO>>
1. Se encontro el simbolo coma: ,
                  Visited token: <<SIMBOLO_COMA>: "," at line 1 column 36>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                Return: param_ending(LOOKAHEAD SUCCEEDED)
              Return: param(LOOKAHEAD SUCCEEDED)
              Call:   param_list_prima(LOOKING AHEAD...)
                Visited token: <<SIMBOLO_COMA>: "," at line 1 column 36>; Expected token: <<SIMBOLO_COMA>>
                Call:   param(LOOKING AHEAD...)
                  Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato int: int
                    Visited token: <"int" at line 1 column 38>; Expected token: <"int">
                  Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: segundoParam
                  Visited token: <<IDENTIFICADOR>: "segundoParam" at line 1 column 42>; Expected token: <<IDENTIFICADOR>>
                  Call:   param_ending(LOOKING AHEAD...)
1. Se encontro el simbolo coma: ,
                    Visited token: <<SIMBOLO_COMA>: "," at line 1 column 54>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                  Return: param_ending(LOOKAHEAD SUCCEEDED)
                Return: param(LOOKAHEAD SUCCEEDED)
                Visited token: <<SIMBOLO_COMA>: "," at line 1 column 54>; Expected token: <<SIMBOLO_COMA>>
                Call:   param(LOOKING AHEAD...)
                  Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato float: float
                    Visited token: <"float" at line 1 column 56>; Expected token: <"int">
                    Visited token: <"float" at line 1 column 56>; Expected token: <"float">
                  Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: tercerParamArreglo
                  Visited token: <<IDENTIFICADOR>: "tercerParamArreglo" at line 1 column 62>; Expected token: <<IDENTIFICADOR>>
                  Call:   param_ending(LOOKING AHEAD...)
1. Se encontro el simbolo de corchete abierto: [
                    Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 1 column 80>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
1. Se encontro el simbolo de corchete cerrado: ]
                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 1 column 81>; Expected token: <<SIMBOLO_CORCHETE_CERRADO>>
1. Se encontro el simbolo coma: ,
                    Visited token: <<SIMBOLO_COMA>: "," at line 1 column 82>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                  Return: param_ending(LOOKAHEAD SUCCEEDED)
                Return: param(LOOKAHEAD SUCCEEDED)
                Visited token: <<SIMBOLO_COMA>: "," at line 1 column 82>; Expected token: <<SIMBOLO_COMA>>
                Call:   param(LOOKING AHEAD...)
                  Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato char: char
                    Visited token: <"char" at line 1 column 84>; Expected token: <"int">
                    Visited token: <"char" at line 1 column 84>; Expected token: <"float">
                    Visited token: <"char" at line 1 column 84>; Expected token: <"char">
                  Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: k
                  Visited token: <<IDENTIFICADOR>: "k" at line 1 column 89>; Expected token: <<IDENTIFICADOR>>
                  Call:   param_ending(LOOKING AHEAD...)
1. Se encontro el simbolo de parentesis cerrado: )
                    Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 1 column 90>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                  Return: param_ending(LOOKAHEAD SUCCEEDED)
                Return: param(LOOKAHEAD SUCCEEDED)
                Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 1 column 90>; Expected token: <<SIMBOLO_COMA>>
              Return: param_list_prima(LOOKAHEAD SUCCEEDED)
            Return: param_list(LOOKAHEAD SUCCEEDED)
            Call:   param_list
              Call:   param
                Call:   type_specifier
                  Consumed token: <"char" at line 1 column 9>
                Return: type_specifier
                Consumed token: <<IDENTIFICADOR>: "arrayDentroParametro" at line 1 column 14>
                Call:   param_ending
                  Consumed token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 1 column 34>
                  Consumed token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 1 column 35>
                Return: param_ending
Repeticion de declaracion en el identificador: arrayDentroParametro
              Return: param
cantidad de contador antes de incremento: 0
cantidad de contador despues de incremento: 1
              Call:   param_list_prima
                Consumed token: <<SIMBOLO_COMA>: "," at line 1 column 36>
                Call:   param
                  Call:   type_specifier
                    Consumed token: <"int" at line 1 column 38>
                  Return: type_specifier
                  Consumed token: <<IDENTIFICADOR>: "segundoParam" at line 1 column 42>
                  Call:   param_ending
                  Return: param_ending
                Return: param
                Consumed token: <<SIMBOLO_COMA>: "," at line 1 column 54>
                Call:   param
                  Call:   type_specifier
                    Consumed token: <"float" at line 1 column 56>
                  Return: type_specifier
                  Consumed token: <<IDENTIFICADOR>: "tercerParamArreglo" at line 1 column 62>
                  Call:   param_ending
                    Consumed token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 1 column 80>
                    Consumed token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 1 column 81>
                  Return: param_ending
Repeticion de declaracion en el identificador: tercerParamArreglo
                Return: param
                Consumed token: <<SIMBOLO_COMA>: "," at line 1 column 82>
                Call:   param
                  Call:   type_specifier
                    Consumed token: <"char" at line 1 column 84>
                  Return: type_specifier
                  Consumed token: <<IDENTIFICADOR>: "k" at line 1 column 89>
                  Call:   param_ending
                  Return: param_ending
                Return: param
              Return: param_list_prima
            Return: param_list
          Return: params
          Consumed token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 1 column 90>
          Call:   compound_stmt
1. Se encontro el simbolo de llave abierta: {
            Consumed token: <<SIMBOLO_LLAVE_ABIERTA>: "{" at line 1 column 91>
            Call:   local_declarations
              Call:   local_declarations_prima
                Call:   var_declaration(LOOKING AHEAD...)
                  Call:   type_specifier(LOOKING AHEAD...)
2. Se encontro el tipo de dato int: int
                    Visited token: <"int" at line 2 column 9>; Expected token: <"int">
                  Return: type_specifier(LOOKAHEAD SUCCEEDED)
2. Se encontro un identificador: arreglo
                  Visited token: <<IDENTIFICADOR>: "arreglo" at line 2 column 13>; Expected token: <<IDENTIFICADOR>>
                  Call:   var_declaration_ending(LOOKING AHEAD...)
2. Se encontro el simbolo de corchete abierto: [
                    Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 2 column 20>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                    Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 2 column 20>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
2. Se encontro un numero entero: 15
                    Visited token: <<NUMERO_ENTERO>: "15" at line 2 column 21>; Expected token: <<NUMERO_ENTERO>>
2. Se encontro el simbolo de corchete cerrado: ]
                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 2 column 23>; Expected token: <<SIMBOLO_CORCHETE_CERRADO>>
2. Se encontro el simbolo punto y coma: ;
                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 2 column 24>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                  Return: var_declaration_ending(LOOKAHEAD SUCCEEDED)
                Return: var_declaration(LOOKAHEAD SUCCEEDED)
                Call:   local_declarations(LOOKING AHEAD...)
                  Call:   local_declarations_prima(LOOKING AHEAD...)
                    Call:   var_declaration(LOOKING AHEAD...)
                      Call:   type_specifier(LOOKING AHEAD...)
3. Se encontro el tipo de dato float: float
                        Visited token: <"float" at line 3 column 9>; Expected token: <"int">
                        Visited token: <"float" at line 3 column 9>; Expected token: <"float">
                      Return: type_specifier(LOOKAHEAD SUCCEEDED)
3. Se encontro un identificador: fl
                      Visited token: <<IDENTIFICADOR>: "fl" at line 3 column 15>; Expected token: <<IDENTIFICADOR>>
                      Call:   var_declaration_ending(LOOKING AHEAD...)
3. Se encontro el simbolo punto y coma: ;
                        Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                      Return: var_declaration_ending(LOOKAHEAD SUCCEEDED)
                    Return: var_declaration(LOOKAHEAD SUCCEEDED)
                    Call:   local_declarations(LOOKING AHEAD...)
                      Call:   local_declarations_prima(LOOKING AHEAD...)
                        Call:   var_declaration(LOOKING AHEAD...)
                          Call:   type_specifier(LOOKING AHEAD...)
5. Se encontro el simbolo de llave cerrada: }
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"int">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"float">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"char">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"void">
                          Return: type_specifier(LOOKAHEAD FAILED)
                        Return: var_declaration(LOOKAHEAD FAILED)
                      Return: local_declarations_prima(LOOKAHEAD SUCCEEDED)
                    Return: local_declarations(LOOKAHEAD SUCCEEDED)
                    Call:   var_declaration(LOOKING AHEAD...)
                      Call:   type_specifier(LOOKING AHEAD...)
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"int">
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"float">
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"char">
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"void">
                      Return: type_specifier(LOOKAHEAD FAILED)
                    Return: var_declaration(LOOKAHEAD FAILED)
                  Return: local_declarations_prima(LOOKAHEAD SUCCEEDED)
                Return: local_declarations(LOOKAHEAD SUCCEEDED)
                Call:   var_declaration
                  Call:   type_specifier
                    Consumed token: <"int" at line 2 column 9>
                  Return: type_specifier
                  Consumed token: <<IDENTIFICADOR>: "arreglo" at line 2 column 13>
                  Call:   var_declaration_ending
                    Consumed token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 2 column 20>
                    Consumed token: <<NUMERO_ENTERO>: "15" at line 2 column 21>
                    Consumed token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 2 column 23>
                    Consumed token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 2 column 24>
                  Return: var_declaration_ending
                Return: var_declaration
                Call:   local_declarations
                  Call:   local_declarations_prima
                    Call:   var_declaration(LOOKING AHEAD...)
                      Call:   type_specifier(LOOKING AHEAD...)
                        Visited token: <"float" at line 3 column 9>; Expected token: <"int">
                        Visited token: <"float" at line 3 column 9>; Expected token: <"float">
                      Return: type_specifier(LOOKAHEAD SUCCEEDED)
                      Visited token: <<IDENTIFICADOR>: "fl" at line 3 column 15>; Expected token: <<IDENTIFICADOR>>
                      Call:   var_declaration_ending(LOOKING AHEAD...)
                        Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                      Return: var_declaration_ending(LOOKAHEAD SUCCEEDED)
                    Return: var_declaration(LOOKAHEAD SUCCEEDED)
                    Call:   local_declarations(LOOKING AHEAD...)
                      Call:   local_declarations_prima(LOOKING AHEAD...)
                        Call:   var_declaration(LOOKING AHEAD...)
                          Call:   type_specifier(LOOKING AHEAD...)
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"int">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"float">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"char">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"void">
                          Return: type_specifier(LOOKAHEAD FAILED)
                        Return: var_declaration(LOOKAHEAD FAILED)
                      Return: local_declarations_prima(LOOKAHEAD SUCCEEDED)
                    Return: local_declarations(LOOKAHEAD SUCCEEDED)
                    Call:   var_declaration
                      Call:   type_specifier
                        Consumed token: <"float" at line 3 column 9>
                      Return: type_specifier
                      Consumed token: <<IDENTIFICADOR>: "fl" at line 3 column 15>
                      Call:   var_declaration_ending
                        Consumed token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>
                      Return: var_declaration_ending
                    Return: var_declaration
                    Call:   local_declarations
                      Call:   local_declarations_prima
                        Call:   var_declaration(LOOKING AHEAD...)
                          Call:   type_specifier(LOOKING AHEAD...)
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"int">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"float">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"char">
                            Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"void">
                          Return: type_specifier(LOOKAHEAD FAILED)
                        Return: var_declaration(LOOKAHEAD FAILED)
                      Return: local_declarations_prima
                    Return: local_declarations
                    Call:   var_declaration(LOOKING AHEAD...)
                      Call:   type_specifier(LOOKING AHEAD...)
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"int">
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"float">
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"char">
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"void">
                      Return: type_specifier(LOOKAHEAD FAILED)
                    Return: var_declaration(LOOKAHEAD FAILED)
                  Return: local_declarations_prima
                Return: local_declarations
                Call:   var_declaration(LOOKING AHEAD...)
                  Call:   type_specifier(LOOKING AHEAD...)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"int">
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"float">
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"char">
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"void">
                  Return: type_specifier(LOOKAHEAD FAILED)
                Return: var_declaration(LOOKAHEAD FAILED)
              Return: local_declarations_prima
            Return: local_declarations
            Call:   statement_list
              Call:   statement_list_prima
                Call:   statement(LOOKING AHEAD...)
                  Call:   return_stmt(LOOKING AHEAD...)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"return">
                  Return: return_stmt(LOOKAHEAD FAILED)
                  Call:   expression_stmt(LOOKING AHEAD...)
                    Call:   expression(LOOKING AHEAD...)
                      Call:   var(LOOKING AHEAD...)
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                      Return: var(LOOKAHEAD FAILED)
                      Call:   simple_expression(LOOKING AHEAD...)
                        Call:   additive_expression(LOOKING AHEAD...)
                          Call:   term(LOOKING AHEAD...)
                            Call:   factor(LOOKING AHEAD...)
                              Call:   call(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                              Return: call(LOOKAHEAD FAILED)
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                              Call:   var(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                              Return: var(LOOKAHEAD FAILED)
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_ENTERO>>
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_REAL>>
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<CARACTER>>
                            Return: factor(LOOKAHEAD FAILED)
                          Return: term(LOOKAHEAD FAILED)
                        Return: additive_expression(LOOKAHEAD FAILED)
                        Call:   additive_expression(LOOKING AHEAD...)
                          Call:   term(LOOKING AHEAD...)
                            Call:   factor(LOOKING AHEAD...)
                              Call:   call(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                              Return: call(LOOKAHEAD FAILED)
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                              Call:   var(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                              Return: var(LOOKAHEAD FAILED)
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_ENTERO>>
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_REAL>>
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<CARACTER>>
                            Return: factor(LOOKAHEAD FAILED)
                          Return: term(LOOKAHEAD FAILED)
                        Return: additive_expression(LOOKAHEAD FAILED)
                      Return: simple_expression(LOOKAHEAD FAILED)
                    Return: expression(LOOKAHEAD FAILED)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                  Return: expression_stmt(LOOKAHEAD FAILED)
                  Call:   compound_stmt(LOOKING AHEAD...)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_LLAVE_ABIERTA>>
                  Return: compound_stmt(LOOKAHEAD FAILED)
                  Call:   selection_stmt(LOOKING AHEAD...)
                    Call:   parte_if(LOOKING AHEAD...)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"if">
                    Return: parte_if(LOOKAHEAD FAILED)
                  Return: selection_stmt(LOOKAHEAD FAILED)
                  Call:   iteration_stmt(LOOKING AHEAD...)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"while">
                  Return: iteration_stmt(LOOKAHEAD FAILED)
                Return: statement(LOOKAHEAD FAILED)
              Return: statement_list_prima
            Return: statement_list
            Consumed token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>
          Return: compound_stmt
        Return: fun_declaration
      Return: declaration
      Call:   declaration_list_prima
        Call:   declaration(LOOKING AHEAD...)
          Call:   var_declaration(LOOKING AHEAD...)
            Call:   type_specifier(LOOKING AHEAD...)
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"int">
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"float">
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"char">
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"void">
            Return: type_specifier(LOOKAHEAD FAILED)
          Return: var_declaration(LOOKAHEAD FAILED)
          Call:   fun_declaration(LOOKING AHEAD...)
            Call:   type_specifier(LOOKING AHEAD...)
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"int">
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"float">
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"char">
              Visited token: <<EOF> at line 5 column 1>; Expected token: <"void">
            Return: type_specifier(LOOKAHEAD FAILED)
          Return: fun_declaration(LOOKAHEAD FAILED)
        Return: declaration(LOOKAHEAD FAILED)
      Return: declaration_list_prima
    Return: declaration_list
  Return: program
  Consumed token: <<EOF> at line 5 column 1>
Return: Inicio
ACCEDIENDO A TABLA DE SIMBOLOS(HASH)


Variable: k
categoria: variable
tipo: char
tamaño o # de parametros: 1


Variable: tercerParamArreglo
categoria: arreglo
tipo: float
tamaño o # de parametros: 8


Variable: arreglo
categoria: arreglo
tipo: int
tamaño o # de parametros: 15


Variable: segundoParam
categoria: variable
tipo: int
tamaño o # de parametros: 4


Variable: fl
categoria: variable
tipo: float
tamaño o # de parametros: 8


Variable: f
categoria: funcion
tipo: float
tamaño o # de parametros: 4


Variable: arrayDentroParametro
categoria: arreglo
tipo: char
tamaño o # de parametros: 1


Analysis has ended successfully!
