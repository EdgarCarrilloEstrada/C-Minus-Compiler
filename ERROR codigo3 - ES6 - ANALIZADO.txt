Call:   program
  Call:   declaration_list
    Call:   declaration
      Call:   var_declaration(LOOKING AHEAD...)
        Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato int: int
          Visited token: <"int" at line 1 column 1>; Expected token: <"int">
        Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: gcd
        Visited token: <<IDENTIFICADOR>: "gcd" at line 1 column 5>; Expected token: <<IDENTIFICADOR>>
1. Se encontro el simbolo de parentesis abierto: (
        Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
        Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_COMA>>
        Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
      Return: var_declaration(LOOKAHEAD FAILED)
      Call:   fun_declaration
        Call:   type_specifier
          Consumed token: <"int" at line 1 column 1>
        Return: type_specifier
        Consumed token: <<IDENTIFICADOR>: "gcd" at line 1 column 5>
        Consumed token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>
        Call:   params
          Call:   param_list(LOOKING AHEAD...)
            Call:   param(LOOKING AHEAD...)
              Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato int: int
                Visited token: <"int" at line 1 column 9>; Expected token: <"int">
              Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: v
              Visited token: <<IDENTIFICADOR>: "v" at line 1 column 13>; Expected token: <<IDENTIFICADOR>>
              Call:   param_list
                Call:   param
                  Call:   type_specifier
                    Consumed token: <"int" at line 1 column 9>
                  Return: type_specifier
                  Consumed token: <<IDENTIFICADOR>: "v" at line 1 column 13>
1. Se encontro el simbolo coma: ,
                Return: param
                Call:   param_list_prima
                  Consumed token: <<SIMBOLO_COMA>: "," at line 1 column 14>
                  Call:   param
                    Call:   type_specifier
1. Se encontro el tipo de dato int: int
                      Consumed token: <"int" at line 1 column 16>
                    Return: type_specifier
1. Se encontro un identificador: h
                    Consumed token: <<IDENTIFICADOR>: "h" at line 1 column 20>
1. Se encontro el simbolo de parentesis cerrado: )
                  Return: param
                Return: param_list_prima
              Return: param_list
            Return: params
            Consumed token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 1 column 21>
            Call:   compound_stmt
2. Se encontro el simbolo de llave abierta: {
              Consumed token: <<SIMBOLO_LLAVE_ABIERTA>: "{" at line 2 column 1>
              Call:   local_declarations
                Call:   local_declarations_prima
                  Call:   var_declaration(LOOKING AHEAD...)
                    Call:   type_specifier(LOOKING AHEAD...)
3. Se encontro el condicional if: if
                      Visited token: <"if" at line 3 column 9>; Expected token: <"int">
                      Visited token: <"if" at line 3 column 9>; Expected token: <"float">
                      Visited token: <"if" at line 3 column 9>; Expected token: <"char">
                      Visited token: <"if" at line 3 column 9>; Expected token: <"void">
                    Return: type_specifier(LOOKAHEAD FAILED)
                  Return: var_declaration(LOOKAHEAD FAILED)
                Return: local_declarations_prima
              Return: local_declarations
              Call:   statement_list
                Call:   statement_list_prima
                  Call:   statement(LOOKING AHEAD...)
                    Call:   expression_stmt(LOOKING AHEAD...)
                      Call:   expression(LOOKING AHEAD...)
                        Call:   var(LOOKING AHEAD...)
                          Visited token: <"if" at line 3 column 9>; Expected token: <<IDENTIFICADOR>>
                        Return: var(LOOKAHEAD FAILED)
                        Call:   simple_expression(LOOKING AHEAD...)
                          Call:   additive_expression(LOOKING AHEAD...)
                            Call:   term(LOOKING AHEAD...)
                              Call:   factor(LOOKING AHEAD...)
                                Visited token: <"if" at line 3 column 9>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <"if" at line 3 column 9>; Expected token: <<IDENTIFICADOR>>
                                Return: var(LOOKAHEAD FAILED)
                                Call:   call(LOOKING AHEAD...)
                                  Visited token: <"if" at line 3 column 9>; Expected token: <<IDENTIFICADOR>>
                                Return: call(LOOKAHEAD FAILED)
                                Visited token: <"if" at line 3 column 9>; Expected token: <<NUMERO_ENTERO>>
                                Visited token: <"if" at line 3 column 9>; Expected token: <<NUMERO_REAL>>
                                Visited token: <"if" at line 3 column 9>; Expected token: <<CARACTER>>
                              Return: factor(LOOKAHEAD FAILED)
                            Return: term(LOOKAHEAD FAILED)
                          Return: additive_expression(LOOKAHEAD FAILED)
                          Call:   additive_expression(LOOKING AHEAD...)
                            Call:   term(LOOKING AHEAD...)
                              Call:   factor(LOOKING AHEAD...)
                                Visited token: <"if" at line 3 column 9>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <"if" at line 3 column 9>; Expected token: <<IDENTIFICADOR>>
                                Return: var(LOOKAHEAD FAILED)
                                Call:   call(LOOKING AHEAD...)
                                  Visited token: <"if" at line 3 column 9>; Expected token: <<IDENTIFICADOR>>
                                Return: call(LOOKAHEAD FAILED)
                                Visited token: <"if" at line 3 column 9>; Expected token: <<NUMERO_ENTERO>>
                                Visited token: <"if" at line 3 column 9>; Expected token: <<NUMERO_REAL>>
                                Visited token: <"if" at line 3 column 9>; Expected token: <<CARACTER>>
                              Return: factor(LOOKAHEAD FAILED)
                            Return: term(LOOKAHEAD FAILED)
                          Return: additive_expression(LOOKAHEAD FAILED)
                        Return: simple_expression(LOOKAHEAD FAILED)
                      Return: expression(LOOKAHEAD FAILED)
                      Visited token: <"if" at line 3 column 9>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                    Return: expression_stmt(LOOKAHEAD FAILED)
                    Call:   compound_stmt(LOOKING AHEAD...)
                      Visited token: <"if" at line 3 column 9>; Expected token: <<SIMBOLO_LLAVE_ABIERTA>>
                    Return: compound_stmt(LOOKAHEAD FAILED)
                    Call:   selection_stmt(LOOKING AHEAD...)
                      Visited token: <"if" at line 3 column 9>; Expected token: <"if">
3. Se encontro el simbolo de parentesis abierto: (
                      Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 3 column 11>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                      Call:   statement
                        Call:   selection_stmt
                          Visited token: <"if" at line 3 column 9>; Expected token: <"if">
                          Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 3 column 11>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                          Call:   expression(LOOKING AHEAD...)
                            Call:   var(LOOKING AHEAD...)
3. Se encontro un identificador: v
                              Visited token: <<IDENTIFICADOR>: "v" at line 3 column 12>; Expected token: <<IDENTIFICADOR>>
                              Consumed token: <"if" at line 3 column 9>
                              Consumed token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 3 column 11>
                              Call:   expression
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <<IDENTIFICADOR>: "v" at line 3 column 12>; Expected token: <<IDENTIFICADOR>>
3. Se encontro el simbolo de comparacion: ==
                                  Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                                Return: var(LOOKAHEAD SUCCEEDED)
                                Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_ASIGNACION>>
                                Call:   simple_expression
                                  Call:   additive_expression(LOOKING AHEAD...)
                                    Call:   term(LOOKING AHEAD...)
                                      Call:   factor(LOOKING AHEAD...)
                                        Visited token: <<IDENTIFICADOR>: "v" at line 3 column 12>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                        Call:   var(LOOKING AHEAD...)
                                          Visited token: <<IDENTIFICADOR>: "v" at line 3 column 12>; Expected token: <<IDENTIFICADOR>>
                                          Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                                        Return: var(LOOKAHEAD SUCCEEDED)
                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                      Call:   term_prima(LOOKING AHEAD...)
                                        Call:   mulop(LOOKING AHEAD...)
                                          Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_POR>>
                                          Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_DIVISION>>
                                          Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MODULO>>
                                        Return: mulop(LOOKAHEAD FAILED)
                                      Return: term_prima(LOOKAHEAD SUCCEEDED)
                                    Return: term(LOOKAHEAD SUCCEEDED)
                                    Call:   additive_expression_prima(LOOKING AHEAD...)
                                      Call:   addop(LOOKING AHEAD...)
                                        Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MAS>>
                                        Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MENOS>>
                                      Return: addop(LOOKAHEAD FAILED)
                                    Return: additive_expression_prima(LOOKAHEAD SUCCEEDED)
                                  Return: additive_expression(LOOKAHEAD SUCCEEDED)
                                  Call:   relop(LOOKING AHEAD...)
                                    Visited token: <"==" at line 3 column 13>; Expected token: <"<=">
                                    Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MENOR_QUE>>
                                    Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                                    Visited token: <"==" at line 3 column 13>; Expected token: <">=">
                                    Visited token: <"==" at line 3 column 13>; Expected token: <"==">
                                  Return: relop(LOOKAHEAD SUCCEEDED)
                                  Call:   additive_expression(LOOKING AHEAD...)
                                    Call:   term(LOOKING AHEAD...)
                                      Call:   factor(LOOKING AHEAD...)
3. Se encontro un numero entero: 0
                                        Visited token: <<NUMERO_ENTERO>: "0" at line 3 column 15>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                        Call:   var(LOOKING AHEAD...)
                                          Visited token: <<NUMERO_ENTERO>: "0" at line 3 column 15>; Expected token: <<IDENTIFICADOR>>
                                        Return: var(LOOKAHEAD FAILED)
                                        Call:   call(LOOKING AHEAD...)
                                          Visited token: <<NUMERO_ENTERO>: "0" at line 3 column 15>; Expected token: <<IDENTIFICADOR>>
                                        Return: call(LOOKAHEAD FAILED)
                                        Visited token: <<NUMERO_ENTERO>: "0" at line 3 column 15>; Expected token: <<NUMERO_ENTERO>>
                                        Call:   additive_expression
                                          Call:   term
                                            Call:   factor
                                              Call:   var(LOOKING AHEAD...)
                                                Visited token: <<IDENTIFICADOR>: "v" at line 3 column 12>; Expected token: <<IDENTIFICADOR>>
                                                Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                                              Return: var(LOOKAHEAD SUCCEEDED)
                                              Call:   var
                                                Consumed token: <<IDENTIFICADOR>: "v" at line 3 column 12>
                                              Return: var
                                            Return: factor
                                            Call:   term_prima
                                              Call:   mulop(LOOKING AHEAD...)
                                                Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_POR>>
                                                Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_DIVISION>>
                                                Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MODULO>>
                                              Return: mulop(LOOKAHEAD FAILED)
                                            Return: term_prima
                                          Return: term
                                          Call:   additive_expression_prima
                                            Call:   addop(LOOKING AHEAD...)
                                              Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MAS>>
                                              Visited token: <"==" at line 3 column 13>; Expected token: <<SIMBOLO_MENOS>>
                                            Return: addop(LOOKAHEAD FAILED)
                                          Return: additive_expression_prima
                                        Return: additive_expression
                                        Call:   relop
                                          Consumed token: <"==" at line 3 column 13>
                                        Return: relop
                                        Call:   additive_expression
                                          Call:   term
                                            Call:   factor
                                              Call:   var(LOOKING AHEAD...)
                                                Visited token: <<NUMERO_ENTERO>: "0" at line 3 column 15>; Expected token: <<IDENTIFICADOR>>
                                              Return: var(LOOKAHEAD FAILED)
                                              Call:   call(LOOKING AHEAD...)
                                                Visited token: <<NUMERO_ENTERO>: "0" at line 3 column 15>; Expected token: <<IDENTIFICADOR>>
                                              Return: call(LOOKAHEAD FAILED)
                                              Consumed token: <<NUMERO_ENTERO>: "0" at line 3 column 15>
                                            Return: factor
                                            Call:   term_prima
                                              Call:   mulop(LOOKING AHEAD...)
3. Se encontro el simbolo de parentesis cerrado: )
                                                Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 3 column 16>; Expected token: <<SIMBOLO_POR>>
                                                Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 3 column 16>; Expected token: <<SIMBOLO_DIVISION>>
                                                Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 3 column 16>; Expected token: <<SIMBOLO_MODULO>>
                                              Return: mulop(LOOKAHEAD FAILED)
                                            Return: term_prima
                                          Return: term
                                          Call:   additive_expression_prima
                                            Call:   addop(LOOKING AHEAD...)
                                              Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 3 column 16>; Expected token: <<SIMBOLO_MAS>>
                                              Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 3 column 16>; Expected token: <<SIMBOLO_MENOS>>
                                            Return: addop(LOOKAHEAD FAILED)
                                          Return: additive_expression_prima
                                        Return: additive_expression
                                      Return: simple_expression
                                    Return: expression
                                    Consumed token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 3 column 16>
                                    Call:   statement
3. Se encontro el retorno de valor return: return
                                      Call:   return_stmt
                                        Visited token: <"return" at line 3 column 18>; Expected token: <"return">
3. Se encontro un identificador: u
                                        Visited token: <<IDENTIFICADOR>: "u" at line 3 column 25>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                                        Consumed token: <"return" at line 3 column 18>
                                        Call:   expression
                                          Call:   var(LOOKING AHEAD...)
                                            Visited token: <<IDENTIFICADOR>: "u" at line 3 column 25>; Expected token: <<IDENTIFICADOR>>
3. Se encontro el simbolo punto y coma: ;
                                            Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                                          Return: var(LOOKAHEAD SUCCEEDED)
                                          Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_ASIGNACION>>
                                          Call:   simple_expression
                                            Call:   additive_expression(LOOKING AHEAD...)
                                              Call:   term(LOOKING AHEAD...)
                                                Call:   factor(LOOKING AHEAD...)
                                                  Visited token: <<IDENTIFICADOR>: "u" at line 3 column 25>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                                  Call:   var(LOOKING AHEAD...)
                                                    Visited token: <<IDENTIFICADOR>: "u" at line 3 column 25>; Expected token: <<IDENTIFICADOR>>
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                Call:   term_prima(LOOKING AHEAD...)
                                                  Call:   mulop(LOOKING AHEAD...)
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_POR>>
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_DIVISION>>
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MODULO>>
                                                  Return: mulop(LOOKAHEAD FAILED)
                                                Return: term_prima(LOOKAHEAD SUCCEEDED)
                                              Return: term(LOOKAHEAD SUCCEEDED)
                                              Call:   additive_expression_prima(LOOKING AHEAD...)
                                                Call:   addop(LOOKING AHEAD...)
                                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MAS>>
                                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MENOS>>
                                                Return: addop(LOOKAHEAD FAILED)
                                              Return: additive_expression_prima(LOOKAHEAD SUCCEEDED)
                                            Return: additive_expression(LOOKAHEAD SUCCEEDED)
                                            Call:   relop(LOOKING AHEAD...)
                                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <"<=">
                                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MENOR_QUE>>
                                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <">=">
                                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <"==">
                                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <"!=">
                                            Return: relop(LOOKAHEAD FAILED)
                                            Call:   additive_expression
                                              Call:   term
                                                Call:   factor
                                                  Call:   var(LOOKING AHEAD...)
                                                    Visited token: <<IDENTIFICADOR>: "u" at line 3 column 25>; Expected token: <<IDENTIFICADOR>>
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                  Call:   var
                                                    Consumed token: <<IDENTIFICADOR>: "u" at line 3 column 25>
                                                  Return: var
                                                Return: factor
                                                Call:   term_prima
                                                  Call:   mulop(LOOKING AHEAD...)
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_POR>>
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_DIVISION>>
                                                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MODULO>>
                                                  Return: mulop(LOOKAHEAD FAILED)
                                                Return: term_prima
                                              Return: term
                                              Call:   additive_expression_prima
                                                Call:   addop(LOOKING AHEAD...)
                                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MAS>>
                                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>; Expected token: <<SIMBOLO_MENOS>>
                                                Return: addop(LOOKAHEAD FAILED)
                                              Return: additive_expression_prima
                                            Return: additive_expression
                                          Return: simple_expression
                                        Return: expression
                                        Consumed token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 26>
                                      Return: return_stmt
                                    Return: statement
                                  Return: selection_stmt
                                Return: statement
                                Call:   statement_list_prima
                                  Call:   statement(LOOKING AHEAD...)
                                    Call:   expression_stmt(LOOKING AHEAD...)
                                      Call:   expression(LOOKING AHEAD...)
                                        Call:   var(LOOKING AHEAD...)
4. Se encontro el condicional else: else
                                          Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                        Return: var(LOOKAHEAD FAILED)
                                        Call:   simple_expression(LOOKING AHEAD...)
                                          Call:   additive_expression(LOOKING AHEAD...)
                                            Call:   term(LOOKING AHEAD...)
                                              Call:   factor(LOOKING AHEAD...)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                                Call:   var(LOOKING AHEAD...)
                                                  Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                                Return: var(LOOKAHEAD FAILED)
                                                Call:   call(LOOKING AHEAD...)
                                                  Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                                Return: call(LOOKAHEAD FAILED)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_ENTERO>>
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_REAL>>
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<CARACTER>>
                                              Return: factor(LOOKAHEAD FAILED)
                                            Return: term(LOOKAHEAD FAILED)
                                          Return: additive_expression(LOOKAHEAD FAILED)
                                          Call:   additive_expression(LOOKING AHEAD...)
                                            Call:   term(LOOKING AHEAD...)
                                              Call:   factor(LOOKING AHEAD...)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                                Call:   var(LOOKING AHEAD...)
                                                  Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                                Return: var(LOOKAHEAD FAILED)
                                                Call:   call(LOOKING AHEAD...)
                                                  Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                                Return: call(LOOKAHEAD FAILED)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_ENTERO>>
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_REAL>>
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<CARACTER>>
                                              Return: factor(LOOKAHEAD FAILED)
                                            Return: term(LOOKAHEAD FAILED)
                                          Return: additive_expression(LOOKAHEAD FAILED)
                                        Return: simple_expression(LOOKAHEAD FAILED)
                                      Return: expression(LOOKAHEAD FAILED)
                                      Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                                    Return: expression_stmt(LOOKAHEAD FAILED)
                                    Call:   compound_stmt(LOOKING AHEAD...)
                                      Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_LLAVE_ABIERTA>>
                                    Return: compound_stmt(LOOKAHEAD FAILED)
                                    Call:   selection_stmt(LOOKING AHEAD...)
                                      Visited token: <"else" at line 4 column 9>; Expected token: <"if">
                                      Visited token: <"else" at line 4 column 9>; Expected token: <"if">
                                    Return: selection_stmt(LOOKAHEAD FAILED)
                                    Call:   iteration_stmt(LOOKING AHEAD...)
                                      Visited token: <"else" at line 4 column 9>; Expected token: <"while">
                                    Return: iteration_stmt(LOOKAHEAD FAILED)
                                    Call:   return_stmt(LOOKING AHEAD...)
                                      Visited token: <"else" at line 4 column 9>; Expected token: <"return">
                                      Visited token: <"else" at line 4 column 9>; Expected token: <"return">
                                    Return: return_stmt(LOOKAHEAD FAILED)
                                  Return: statement(LOOKAHEAD FAILED)
                                Return: statement_list_prima
                                Call:   statement(LOOKING AHEAD...)
                                  Call:   expression_stmt(LOOKING AHEAD...)
                                    Call:   expression(LOOKING AHEAD...)
                                      Call:   var(LOOKING AHEAD...)
                                        Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                      Return: var(LOOKAHEAD FAILED)
                                      Call:   simple_expression(LOOKING AHEAD...)
                                        Call:   additive_expression(LOOKING AHEAD...)
                                          Call:   term(LOOKING AHEAD...)
                                            Call:   factor(LOOKING AHEAD...)
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                              Call:   var(LOOKING AHEAD...)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                              Return: var(LOOKAHEAD FAILED)
                                              Call:   call(LOOKING AHEAD...)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                              Return: call(LOOKAHEAD FAILED)
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_ENTERO>>
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_REAL>>
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<CARACTER>>
                                            Return: factor(LOOKAHEAD FAILED)
                                          Return: term(LOOKAHEAD FAILED)
                                        Return: additive_expression(LOOKAHEAD FAILED)
                                        Call:   additive_expression(LOOKING AHEAD...)
                                          Call:   term(LOOKING AHEAD...)
                                            Call:   factor(LOOKING AHEAD...)
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                              Call:   var(LOOKING AHEAD...)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                              Return: var(LOOKAHEAD FAILED)
                                              Call:   call(LOOKING AHEAD...)
                                                Visited token: <"else" at line 4 column 9>; Expected token: <<IDENTIFICADOR>>
                                              Return: call(LOOKAHEAD FAILED)
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_ENTERO>>
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<NUMERO_REAL>>
                                              Visited token: <"else" at line 4 column 9>; Expected token: <<CARACTER>>
                                            Return: factor(LOOKAHEAD FAILED)
                                          Return: term(LOOKAHEAD FAILED)
                                        Return: additive_expression(LOOKAHEAD FAILED)
                                      Return: simple_expression(LOOKAHEAD FAILED)
                                    Return: expression(LOOKAHEAD FAILED)
                                    Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                                  Return: expression_stmt(LOOKAHEAD FAILED)
                                  Call:   compound_stmt(LOOKING AHEAD...)
                                    Visited token: <"else" at line 4 column 9>; Expected token: <<SIMBOLO_LLAVE_ABIERTA>>
                                  Return: compound_stmt(LOOKAHEAD FAILED)
                                  Call:   selection_stmt(LOOKING AHEAD...)
                                    Visited token: <"else" at line 4 column 9>; Expected token: <"if">
                                    Visited token: <"else" at line 4 column 9>; Expected token: <"if">
                                  Return: selection_stmt(LOOKAHEAD FAILED)
                                  Call:   iteration_stmt(LOOKING AHEAD...)
                                    Visited token: <"else" at line 4 column 9>; Expected token: <"while">
                                  Return: iteration_stmt(LOOKAHEAD FAILED)
                                  Call:   return_stmt(LOOKING AHEAD...)
                                    Visited token: <"else" at line 4 column 9>; Expected token: <"return">
                                    Visited token: <"else" at line 4 column 9>; Expected token: <"return">
                                  Return: return_stmt(LOOKAHEAD FAILED)
                                Return: statement(LOOKAHEAD FAILED)
                              Return: statement_list_prima
                            Return: statement_list
                          Return: compound_stmt
                        Return: fun_declaration
                      Return: declaration
                    Return: declaration_list
                  Return: program
