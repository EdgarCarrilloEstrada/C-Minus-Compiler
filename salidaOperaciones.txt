Call:   Inicio
  Call:   program
    Call:   declaration_list
      Call:   declaration
        Call:   var_declaration(LOOKING AHEAD...)
          Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato float: float
            Visited token: <"float" at line 1 column 1>; Expected token: <"int">
            Visited token: <"float" at line 1 column 1>; Expected token: <"float">
          Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: f
          Visited token: <<IDENTIFICADOR>: "f" at line 1 column 7>; Expected token: <<IDENTIFICADOR>>
          Call:   var_declaration_ending(LOOKING AHEAD...)
1. Se encontro el simbolo de parentesis abierto: (
            Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
            Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
            Call:   varias_variables(LOOKING AHEAD...)
              Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_COMA>>
            Return: varias_variables(LOOKAHEAD SUCCEEDED)
            Visited token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
          Return: var_declaration_ending(LOOKAHEAD FAILED)
        Return: var_declaration(LOOKAHEAD FAILED)
        Call:   fun_declaration
          Call:   type_specifier
            Consumed token: <"float" at line 1 column 1>
          Return: type_specifier
          Consumed token: <<IDENTIFICADOR>: "f" at line 1 column 7>
          Consumed token: <<SIMBOLO_PARENTESIS_ABIERTO>: "(" at line 1 column 8>
          Call:   params
            Call:   param_list(LOOKING AHEAD...)
              Call:   param(LOOKING AHEAD...)
                Call:   type_specifier(LOOKING AHEAD...)
1. Se encontro el tipo de dato char: char
                  Visited token: <"char" at line 1 column 9>; Expected token: <"int">
                  Visited token: <"char" at line 1 column 9>; Expected token: <"float">
                  Visited token: <"char" at line 1 column 9>; Expected token: <"char">
                Return: type_specifier(LOOKAHEAD SUCCEEDED)
1. Se encontro un identificador: c
                Visited token: <<IDENTIFICADOR>: "c" at line 1 column 14>; Expected token: <<IDENTIFICADOR>>
                Call:   param_ending(LOOKING AHEAD...)
1. Se encontro el simbolo de parentesis cerrado: )
                  Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 1 column 15>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                Return: param_ending(LOOKAHEAD SUCCEEDED)
              Return: param(LOOKAHEAD SUCCEEDED)
              Call:   param_list_prima(LOOKING AHEAD...)
                Visited token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 1 column 15>; Expected token: <<SIMBOLO_COMA>>
              Return: param_list_prima(LOOKAHEAD SUCCEEDED)
            Return: param_list(LOOKAHEAD SUCCEEDED)
            Call:   param_list
              Call:   param
                Call:   type_specifier
                  Consumed token: <"char" at line 1 column 9>
                Return: type_specifier
                Consumed token: <<IDENTIFICADOR>: "c" at line 1 column 14>
                Call:   param_ending
                Return: param_ending
              Return: param
              Call:   param_list_prima
              Return: param_list_prima
            Return: param_list
          Return: params
          Consumed token: <<SIMBOLO_PARENTESIS_CERRADO>: ")" at line 1 column 15>
          Call:   compound_stmt
1. Se encontro el simbolo de llave abierta: {
            Consumed token: <<SIMBOLO_LLAVE_ABIERTA>: "{" at line 1 column 16>
            Call:   local_declarations
              Call:   local_declarations_prima
                Call:   var_declaration(LOOKING AHEAD...)
                  Call:   type_specifier(LOOKING AHEAD...)
2. Se encontro el tipo de dato int: int
                    Visited token: <"int" at line 2 column 9>; Expected token: <"int">
                  Return: type_specifier(LOOKAHEAD SUCCEEDED)
2. Se encontro un identificador: a
                  Visited token: <<IDENTIFICADOR>: "a" at line 2 column 13>; Expected token: <<IDENTIFICADOR>>
                  Call:   var_declaration_ending(LOOKING AHEAD...)
2. Se encontro el simbolo de corchete abierto: [
                    Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 2 column 14>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                    Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 2 column 14>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
2. Se encontro un numero entero: 6
                    Visited token: <<NUMERO_ENTERO>: "6" at line 2 column 15>; Expected token: <<NUMERO_ENTERO>>
2. Se encontro el simbolo de corchete cerrado: ]
                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 2 column 16>; Expected token: <<SIMBOLO_CORCHETE_CERRADO>>
2. Se encontro el simbolo punto y coma: ;
                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 2 column 17>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                  Return: var_declaration_ending(LOOKAHEAD SUCCEEDED)
                Return: var_declaration(LOOKAHEAD SUCCEEDED)
                Call:   local_declarations(LOOKING AHEAD...)
                  Call:   local_declarations_prima(LOOKING AHEAD...)
                    Call:   var_declaration(LOOKING AHEAD...)
                      Call:   type_specifier(LOOKING AHEAD...)
3. Se encontro un identificador: a
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"int">
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"float">
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"char">
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"void">
                      Return: type_specifier(LOOKAHEAD FAILED)
                    Return: var_declaration(LOOKAHEAD FAILED)
                  Return: local_declarations_prima(LOOKAHEAD SUCCEEDED)
                Return: local_declarations(LOOKAHEAD SUCCEEDED)
                Call:   var_declaration
                  Call:   type_specifier
                    Consumed token: <"int" at line 2 column 9>
                  Return: type_specifier
                  Consumed token: <<IDENTIFICADOR>: "a" at line 2 column 13>
                  Call:   var_declaration_ending
                    Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 2 column 14>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                    Consumed token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 2 column 14>
                    Consumed token: <<NUMERO_ENTERO>: "6" at line 2 column 15>
                    Consumed token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 2 column 16>
                    Consumed token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 2 column 17>
                  Return: var_declaration_ending
                Return: var_declaration
                Call:   local_declarations
                  Call:   local_declarations_prima
                    Call:   var_declaration(LOOKING AHEAD...)
                      Call:   type_specifier(LOOKING AHEAD...)
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"int">
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"float">
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"char">
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"void">
                      Return: type_specifier(LOOKAHEAD FAILED)
                    Return: var_declaration(LOOKAHEAD FAILED)
                  Return: local_declarations_prima
                Return: local_declarations
                Call:   var_declaration(LOOKING AHEAD...)
                  Call:   type_specifier(LOOKING AHEAD...)
                    Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"int">
                    Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"float">
                    Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"char">
                    Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"void">
                  Return: type_specifier(LOOKAHEAD FAILED)
                Return: var_declaration(LOOKAHEAD FAILED)
              Return: local_declarations_prima
            Return: local_declarations
            Call:   statement_list
              Call:   statement_list_prima
                Call:   statement(LOOKING AHEAD...)
                  Call:   return_stmt(LOOKING AHEAD...)
                    Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <"return">
                  Return: return_stmt(LOOKAHEAD FAILED)
                  Call:   expression_stmt(LOOKING AHEAD...)
                    Call:   expression(LOOKING AHEAD...)
                      Call:   var(LOOKING AHEAD...)
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <<IDENTIFICADOR>>
                        Call:   var_extra(LOOKING AHEAD...)
3. Se encontro el simbolo de corchete abierto: [
                          Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 3 column 10>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                          Call:   expression(LOOKING AHEAD...)
                            Call:   var(LOOKING AHEAD...)
3. Se encontro un numero entero: 2
                              Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                            Return: var(LOOKAHEAD FAILED)
                            Call:   simple_expression(LOOKING AHEAD...)
                              Call:   additive_expression(LOOKING AHEAD...)
                                Call:   term(LOOKING AHEAD...)
                                  Call:   factor(LOOKING AHEAD...)
                                    Call:   call(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: call(LOOKAHEAD FAILED)
                                    Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                    Call:   var(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: var(LOOKAHEAD FAILED)
                                    Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<NUMERO_ENTERO>>
                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                  Call:   term_prima(LOOKING AHEAD...)
                                    Call:   mulop(LOOKING AHEAD...)
3. Se encontro el simbolo de corchete cerrado: ]
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_POR>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_DIVISION>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MODULO>>
                                    Return: mulop(LOOKAHEAD FAILED)
                                  Return: term_prima(LOOKAHEAD SUCCEEDED)
                                Return: term(LOOKAHEAD SUCCEEDED)
                                Call:   additive_expression_prima(LOOKING AHEAD...)
                                  Call:   addop(LOOKING AHEAD...)
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAS>>
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOS>>
                                  Return: addop(LOOKAHEAD FAILED)
                                Return: additive_expression_prima(LOOKAHEAD SUCCEEDED)
                              Return: additive_expression(LOOKAHEAD SUCCEEDED)
                              Call:   simple_expression_ending(LOOKING AHEAD...)
                                Call:   relop(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"<=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <">=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"==">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"!=">
                                Return: relop(LOOKAHEAD FAILED)
                              Return: simple_expression_ending(LOOKAHEAD SUCCEEDED)
                            Return: simple_expression(LOOKAHEAD SUCCEEDED)
                          Return: expression(LOOKAHEAD SUCCEEDED)
                          Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_CORCHETE_CERRADO>>
3. Se encontro el simbolo igual o asignacion: =
                          Visited token: <<SIMBOLO_ASIGNACION>: "=" at line 3 column 14>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                        Return: var_extra(LOOKAHEAD SUCCEEDED)
                      Return: var(LOOKAHEAD SUCCEEDED)
                      Visited token: <<SIMBOLO_ASIGNACION>: "=" at line 3 column 14>; Expected token: <<SIMBOLO_ASIGNACION>>
                      Call:   expression(LOOKING AHEAD...)
                        Call:   var(LOOKING AHEAD...)
3. Se encontro un numero entero: 5
                          Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                        Return: var(LOOKAHEAD FAILED)
                        Call:   simple_expression(LOOKING AHEAD...)
                          Call:   additive_expression(LOOKING AHEAD...)
                            Call:   term(LOOKING AHEAD...)
                              Call:   factor(LOOKING AHEAD...)
                                Call:   call(LOOKING AHEAD...)
                                  Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                                Return: call(LOOKAHEAD FAILED)
                                Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                                Return: var(LOOKAHEAD FAILED)
                                Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<NUMERO_ENTERO>>
                              Return: factor(LOOKAHEAD SUCCEEDED)
                              Call:   term_prima(LOOKING AHEAD...)
                                Call:   mulop(LOOKING AHEAD...)
3. Se encontro el simbolo punto y coma: ;
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_POR>>
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_DIVISION>>
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MODULO>>
                                Return: mulop(LOOKAHEAD FAILED)
                              Return: term_prima(LOOKAHEAD SUCCEEDED)
                            Return: term(LOOKAHEAD SUCCEEDED)
                            Call:   additive_expression_prima(LOOKING AHEAD...)
                              Call:   addop(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MAS>>
                                Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MENOS>>
                              Return: addop(LOOKAHEAD FAILED)
                            Return: additive_expression_prima(LOOKAHEAD SUCCEEDED)
                          Return: additive_expression(LOOKAHEAD SUCCEEDED)
                          Call:   simple_expression_ending(LOOKING AHEAD...)
                            Call:   relop(LOOKING AHEAD...)
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"<=">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MENOR_QUE>>
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <">=">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"==">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"!=">
                            Return: relop(LOOKAHEAD FAILED)
                          Return: simple_expression_ending(LOOKAHEAD SUCCEEDED)
                        Return: simple_expression(LOOKAHEAD SUCCEEDED)
                      Return: expression(LOOKAHEAD SUCCEEDED)
                    Return: expression(LOOKAHEAD SUCCEEDED)
                    Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                  Return: expression_stmt(LOOKAHEAD SUCCEEDED)
                Return: statement(LOOKAHEAD SUCCEEDED)
                Call:   statement_list_prima(LOOKING AHEAD...)
                  Call:   statement(LOOKING AHEAD...)
                    Call:   return_stmt(LOOKING AHEAD...)
5. Se encontro el simbolo de llave cerrada: }
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"return">
                    Return: return_stmt(LOOKAHEAD FAILED)
                    Call:   expression_stmt(LOOKING AHEAD...)
                      Call:   expression(LOOKING AHEAD...)
                        Call:   var(LOOKING AHEAD...)
                          Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                        Return: var(LOOKAHEAD FAILED)
                        Call:   simple_expression(LOOKING AHEAD...)
                          Call:   additive_expression(LOOKING AHEAD...)
                            Call:   term(LOOKING AHEAD...)
                              Call:   factor(LOOKING AHEAD...)
                                Call:   call(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                                Return: call(LOOKAHEAD FAILED)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                                Return: var(LOOKAHEAD FAILED)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_ENTERO>>
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_REAL>>
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<CARACTER>>
                              Return: factor(LOOKAHEAD FAILED)
                            Return: term(LOOKAHEAD FAILED)
                          Return: additive_expression(LOOKAHEAD FAILED)
                        Return: simple_expression(LOOKAHEAD FAILED)
                      Return: expression(LOOKAHEAD FAILED)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                    Return: expression_stmt(LOOKAHEAD FAILED)
                    Call:   compound_stmt(LOOKING AHEAD...)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_LLAVE_ABIERTA>>
                    Return: compound_stmt(LOOKAHEAD FAILED)
                    Call:   selection_stmt(LOOKING AHEAD...)
                      Call:   parte_if(LOOKING AHEAD...)
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"if">
                      Return: parte_if(LOOKAHEAD FAILED)
                    Return: selection_stmt(LOOKAHEAD FAILED)
                    Call:   iteration_stmt(LOOKING AHEAD...)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"while">
                    Return: iteration_stmt(LOOKAHEAD FAILED)
                  Return: statement(LOOKAHEAD FAILED)
                Return: statement_list_prima(LOOKAHEAD SUCCEEDED)
                Call:   statement
                  Call:   expression_stmt
                    Call:   expression
                      Call:   var(LOOKING AHEAD...)
                        Visited token: <<IDENTIFICADOR>: "a" at line 3 column 9>; Expected token: <<IDENTIFICADOR>>
                        Call:   var_extra(LOOKING AHEAD...)
                          Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 3 column 10>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                          Call:   expression(LOOKING AHEAD...)
                            Call:   var(LOOKING AHEAD...)
                              Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                            Return: var(LOOKAHEAD FAILED)
                            Call:   simple_expression(LOOKING AHEAD...)
                              Call:   additive_expression(LOOKING AHEAD...)
                                Call:   term(LOOKING AHEAD...)
                                  Call:   factor(LOOKING AHEAD...)
                                    Call:   call(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: call(LOOKAHEAD FAILED)
                                    Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                    Call:   var(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: var(LOOKAHEAD FAILED)
                                    Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<NUMERO_ENTERO>>
                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                  Call:   term_prima(LOOKING AHEAD...)
                                    Call:   mulop(LOOKING AHEAD...)
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_POR>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_DIVISION>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MODULO>>
                                    Return: mulop(LOOKAHEAD FAILED)
                                  Return: term_prima(LOOKAHEAD SUCCEEDED)
                                Return: term(LOOKAHEAD SUCCEEDED)
                                Call:   additive_expression_prima(LOOKING AHEAD...)
                                  Call:   addop(LOOKING AHEAD...)
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAS>>
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOS>>
                                  Return: addop(LOOKAHEAD FAILED)
                                Return: additive_expression_prima(LOOKAHEAD SUCCEEDED)
                              Return: additive_expression(LOOKAHEAD SUCCEEDED)
                              Call:   simple_expression_ending(LOOKING AHEAD...)
                                Call:   relop(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"<=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <">=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"==">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"!=">
                                Return: relop(LOOKAHEAD FAILED)
                              Return: simple_expression_ending(LOOKAHEAD SUCCEEDED)
                            Return: simple_expression(LOOKAHEAD SUCCEEDED)
                          Return: expression(LOOKAHEAD SUCCEEDED)
                          Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_CORCHETE_CERRADO>>
                          Visited token: <<SIMBOLO_ASIGNACION>: "=" at line 3 column 14>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                        Return: var_extra(LOOKAHEAD SUCCEEDED)
                      Return: var(LOOKAHEAD SUCCEEDED)
                      Visited token: <<SIMBOLO_ASIGNACION>: "=" at line 3 column 14>; Expected token: <<SIMBOLO_ASIGNACION>>
                      Call:   expression(LOOKING AHEAD...)
                        Call:   var(LOOKING AHEAD...)
                          Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                        Return: var(LOOKAHEAD FAILED)
                        Call:   simple_expression(LOOKING AHEAD...)
                          Call:   additive_expression(LOOKING AHEAD...)
                            Call:   term(LOOKING AHEAD...)
                              Call:   factor(LOOKING AHEAD...)
                                Call:   call(LOOKING AHEAD...)
                                  Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                                Return: call(LOOKAHEAD FAILED)
                                Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                                Return: var(LOOKAHEAD FAILED)
                                Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<NUMERO_ENTERO>>
                              Return: factor(LOOKAHEAD SUCCEEDED)
                              Call:   term_prima(LOOKING AHEAD...)
                                Call:   mulop(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_POR>>
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_DIVISION>>
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MODULO>>
                                Return: mulop(LOOKAHEAD FAILED)
                              Return: term_prima(LOOKAHEAD SUCCEEDED)
                            Return: term(LOOKAHEAD SUCCEEDED)
                            Call:   additive_expression_prima(LOOKING AHEAD...)
                              Call:   addop(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MAS>>
                                Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MENOS>>
                              Return: addop(LOOKAHEAD FAILED)
                            Return: additive_expression_prima(LOOKAHEAD SUCCEEDED)
                          Return: additive_expression(LOOKAHEAD SUCCEEDED)
                          Call:   simple_expression_ending(LOOKING AHEAD...)
                            Call:   relop(LOOKING AHEAD...)
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"<=">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MENOR_QUE>>
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <">=">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"==">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"!=">
                            Return: relop(LOOKAHEAD FAILED)
                          Return: simple_expression_ending(LOOKAHEAD SUCCEEDED)
                        Return: simple_expression(LOOKAHEAD SUCCEEDED)
                      Return: expression(LOOKAHEAD SUCCEEDED)
                      Call:   var
                        Consumed token: <<IDENTIFICADOR>: "a" at line 3 column 9>
                        Call:   var_extra
                          Visited token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 3 column 10>; Expected token: <<SIMBOLO_CORCHETE_ABIERTO>>
                          Call:   expression(LOOKING AHEAD...)
                            Call:   var(LOOKING AHEAD...)
                              Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                            Return: var(LOOKAHEAD FAILED)
                            Call:   simple_expression(LOOKING AHEAD...)
                              Call:   additive_expression(LOOKING AHEAD...)
                                Call:   term(LOOKING AHEAD...)
                                  Call:   factor(LOOKING AHEAD...)
                                    Call:   call(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: call(LOOKAHEAD FAILED)
                                    Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                    Call:   var(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: var(LOOKAHEAD FAILED)
                                    Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<NUMERO_ENTERO>>
                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                  Call:   term_prima(LOOKING AHEAD...)
                                    Call:   mulop(LOOKING AHEAD...)
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_POR>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_DIVISION>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MODULO>>
                                    Return: mulop(LOOKAHEAD FAILED)
                                  Return: term_prima(LOOKAHEAD SUCCEEDED)
                                Return: term(LOOKAHEAD SUCCEEDED)
                                Call:   additive_expression_prima(LOOKING AHEAD...)
                                  Call:   addop(LOOKING AHEAD...)
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAS>>
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOS>>
                                  Return: addop(LOOKAHEAD FAILED)
                                Return: additive_expression_prima(LOOKAHEAD SUCCEEDED)
                              Return: additive_expression(LOOKAHEAD SUCCEEDED)
                              Call:   simple_expression_ending(LOOKING AHEAD...)
                                Call:   relop(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"<=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <">=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"==">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"!=">
                                Return: relop(LOOKAHEAD FAILED)
                              Return: simple_expression_ending(LOOKAHEAD SUCCEEDED)
                            Return: simple_expression(LOOKAHEAD SUCCEEDED)
                          Return: expression(LOOKAHEAD SUCCEEDED)
                          Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_CORCHETE_CERRADO>>
                          Consumed token: <<SIMBOLO_CORCHETE_ABIERTO>: "[" at line 3 column 10>
                          Call:   expression
                            Call:   var(LOOKING AHEAD...)
                              Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                            Return: var(LOOKAHEAD FAILED)
                            Call:   simple_expression
                              Call:   additive_expression
                                Call:   term
                                  Call:   factor
                                    Call:   call(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: call(LOOKAHEAD FAILED)
                                    Call:   var(LOOKING AHEAD...)
                                      Visited token: <<NUMERO_ENTERO>: "2" at line 3 column 11>; Expected token: <<IDENTIFICADOR>>
                                    Return: var(LOOKAHEAD FAILED)
                                    Consumed token: <<NUMERO_ENTERO>: "2" at line 3 column 11>
                                  Return: factor

ERROR: Tipo de dato diferente

                                  Call:   term_prima
                                    Call:   mulop(LOOKING AHEAD...)
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_POR>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_DIVISION>>
                                      Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MODULO>>
                                    Return: mulop(LOOKAHEAD FAILED)
                                  Return: term_prima
                                Return: term
                                Call:   additive_expression_prima
                                  Call:   addop(LOOKING AHEAD...)
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAS>>
                                    Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOS>>
                                  Return: addop(LOOKAHEAD FAILED)
                                Return: additive_expression_prima
                              Return: additive_expression
                              Call:   simple_expression_ending
                                Call:   relop(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"<=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MENOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <">=">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"==">
                                  Visited token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>; Expected token: <"!=">
                                Return: relop(LOOKAHEAD FAILED)
                              Return: simple_expression_ending
                            Return: simple_expression
                          Return: expression
                          Consumed token: <<SIMBOLO_CORCHETE_CERRADO>: "]" at line 3 column 12>
                        Return: var_extra
                      Return: var
                      Consumed token: <<SIMBOLO_ASIGNACION>: "=" at line 3 column 14>
                      Call:   expression
                        Call:   var(LOOKING AHEAD...)
                          Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                        Return: var(LOOKAHEAD FAILED)
                        Call:   simple_expression
                          Call:   additive_expression
                            Call:   term
                              Call:   factor
                                Call:   call(LOOKING AHEAD...)
                                  Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                                Return: call(LOOKAHEAD FAILED)
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <<NUMERO_ENTERO>: "5" at line 3 column 16>; Expected token: <<IDENTIFICADOR>>
                                Return: var(LOOKAHEAD FAILED)
                                Consumed token: <<NUMERO_ENTERO>: "5" at line 3 column 16>

ERROR: No se ha declarado la variable: int

                              Return: factor
                              Call:   term_prima
                                Call:   mulop(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_POR>>
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_DIVISION>>
                                  Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MODULO>>
                                Return: mulop(LOOKAHEAD FAILED)
                              Return: term_prima
                            Return: term
                            Call:   additive_expression_prima
                              Call:   addop(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MAS>>
                                Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MENOS>>
                              Return: addop(LOOKAHEAD FAILED)
                            Return: additive_expression_prima
                          Return: additive_expression
                          Call:   simple_expression_ending
                            Call:   relop(LOOKING AHEAD...)
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"<=">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MENOR_QUE>>
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <<SIMBOLO_MAYOR_QUE>>
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <">=">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"==">
                              Visited token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>; Expected token: <"!=">
                            Return: relop(LOOKAHEAD FAILED)
                          Return: simple_expression_ending
                        Return: simple_expression
                      Return: expression

ERROR: No se ha declarado la variable: int

                    Return: expression
                    Consumed token: <<SIMBOLO_PUNTO_Y_COMA>: ";" at line 3 column 17>
                  Return: expression_stmt
                Return: statement
                Call:   statement_list_prima
                  Call:   statement(LOOKING AHEAD...)
                    Call:   return_stmt(LOOKING AHEAD...)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"return">
                    Return: return_stmt(LOOKAHEAD FAILED)
                    Call:   expression_stmt(LOOKING AHEAD...)
                      Call:   expression(LOOKING AHEAD...)
                        Call:   var(LOOKING AHEAD...)
                          Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                        Return: var(LOOKAHEAD FAILED)
                        Call:   simple_expression(LOOKING AHEAD...)
                          Call:   additive_expression(LOOKING AHEAD...)
                            Call:   term(LOOKING AHEAD...)
                              Call:   factor(LOOKING AHEAD...)
                                Call:   call(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                                Return: call(LOOKAHEAD FAILED)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                                Call:   var(LOOKING AHEAD...)
                                  Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                                Return: var(LOOKAHEAD FAILED)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_ENTERO>>
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_REAL>>
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<CARACTER>>
                              Return: factor(LOOKAHEAD FAILED)
                            Return: term(LOOKAHEAD FAILED)
                          Return: additive_expression(LOOKAHEAD FAILED)
                        Return: simple_expression(LOOKAHEAD FAILED)
                      Return: expression(LOOKAHEAD FAILED)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                    Return: expression_stmt(LOOKAHEAD FAILED)
                    Call:   compound_stmt(LOOKING AHEAD...)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_LLAVE_ABIERTA>>
                    Return: compound_stmt(LOOKAHEAD FAILED)
                    Call:   selection_stmt(LOOKING AHEAD...)
                      Call:   parte_if(LOOKING AHEAD...)
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"if">
                      Return: parte_if(LOOKAHEAD FAILED)
                    Return: selection_stmt(LOOKAHEAD FAILED)
                    Call:   iteration_stmt(LOOKING AHEAD...)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"while">
                    Return: iteration_stmt(LOOKAHEAD FAILED)
                  Return: statement(LOOKAHEAD FAILED)
                Return: statement_list_prima
                Call:   statement(LOOKING AHEAD...)
                  Call:   return_stmt(LOOKING AHEAD...)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"return">
                  Return: return_stmt(LOOKAHEAD FAILED)
                  Call:   expression_stmt(LOOKING AHEAD...)
                    Call:   expression(LOOKING AHEAD...)
                      Call:   var(LOOKING AHEAD...)
                        Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                      Return: var(LOOKAHEAD FAILED)
                      Call:   simple_expression(LOOKING AHEAD...)
                        Call:   additive_expression(LOOKING AHEAD...)
                          Call:   term(LOOKING AHEAD...)
                            Call:   factor(LOOKING AHEAD...)
                              Call:   call(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                              Return: call(LOOKAHEAD FAILED)
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PARENTESIS_ABIERTO>>
                              Call:   var(LOOKING AHEAD...)
                                Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<IDENTIFICADOR>>
                              Return: var(LOOKAHEAD FAILED)
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_ENTERO>>
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<NUMERO_REAL>>
                              Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<CARACTER>>
                            Return: factor(LOOKAHEAD FAILED)
                          Return: term(LOOKAHEAD FAILED)
                        Return: additive_expression(LOOKAHEAD FAILED)
                      Return: simple_expression(LOOKAHEAD FAILED)
                    Return: expression(LOOKAHEAD FAILED)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_PUNTO_Y_COMA>>
                  Return: expression_stmt(LOOKAHEAD FAILED)
                  Call:   compound_stmt(LOOKING AHEAD...)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <<SIMBOLO_LLAVE_ABIERTA>>
                  Return: compound_stmt(LOOKAHEAD FAILED)
                  Call:   selection_stmt(LOOKING AHEAD...)
                    Call:   parte_if(LOOKING AHEAD...)
                      Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"if">
                    Return: parte_if(LOOKAHEAD FAILED)
                  Return: selection_stmt(LOOKAHEAD FAILED)
                  Call:   iteration_stmt(LOOKING AHEAD...)
                    Visited token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>; Expected token: <"while">
                  Return: iteration_stmt(LOOKAHEAD FAILED)
                Return: statement(LOOKAHEAD FAILED)
              Return: statement_list_prima
            Return: statement_list
            Consumed token: <<SIMBOLO_LLAVE_CERRADA>: "}" at line 5 column 1>
          Return: compound_stmt
        Return: fun_declaration
      Return: declaration
      Call:   declaration_list_prima
        Call:   declaration(LOOKING AHEAD...)
          Call:   var_declaration(LOOKING AHEAD...)
            Call:   type_specifier(LOOKING AHEAD...)
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"int">
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"float">
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"char">
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"void">
            Return: type_specifier(LOOKAHEAD FAILED)
          Return: var_declaration(LOOKAHEAD FAILED)
          Call:   fun_declaration(LOOKING AHEAD...)
            Call:   type_specifier(LOOKING AHEAD...)
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"int">
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"float">
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"char">
              Visited token: <<EOF> at line 5 column 3>; Expected token: <"void">
            Return: type_specifier(LOOKAHEAD FAILED)
          Return: fun_declaration(LOOKAHEAD FAILED)
        Return: declaration(LOOKAHEAD FAILED)
      Return: declaration_list_prima
    Return: declaration_list
  Return: program
  Consumed token: <<EOF> at line 5 column 3>
Return: Inicio


ACCEDIENDO A TABLA DE SIMBOLOS(HASH)


Variable: a
Categoria: arreglo
Tipo: int
Tamaño o # de parametros: 6


Variable: f
Categoria: funcion
Tipo: float
Tamaño o # de parametros: 1


Variable: c
Categoria: variable
Tipo: char
Tamaño o # de parametros: 1


Analysis has ended successfully!
